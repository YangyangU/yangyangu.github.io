<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React 对比 Vue 如何做路由鉴权？</title>
    <link href="/2024/09/09/React%E5%AF%B9%E6%AF%94Vue%E5%A6%82%E4%BD%95%E5%81%9A%E8%B7%AF%E7%94%B1%E9%89%B4%E6%9D%83/"/>
    <url>/2024/09/09/React%E5%AF%B9%E6%AF%94Vue%E5%A6%82%E4%BD%95%E5%81%9A%E8%B7%AF%E7%94%B1%E9%89%B4%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学过 Vue 的小伙伴肯定知道，在 Vue 中，路由守卫可以帮助我们一站式进行路由鉴权。我们只需要在全局前置路由守卫 (<code>beforeEach</code>) 钩子函数中判断逻辑即可，方便快捷。</p><p>但是在 React 中，如何实现类似的功能呢？本文将对比 Vue 和 React 路由鉴权的方式，带你了解如何在 React 中配置路由并实现路由鉴权。</p><h2 id="在Vue中如何实现"><a href="#在Vue中如何实现" class="headerlink" title="在Vue中如何实现"></a>在Vue中如何实现</h2><p>以 Vue3 为例</p><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><p>这里我们简单配置了三个路由，首页、关于和登录页面，除了登录页外都需要登录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Home.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/About.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/Login.vue&#x27;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首页&#x27;</span>,<br>            <span class="hljs-attr">needLogin</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,<br>            <span class="hljs-attr">needLogin</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Login&#x27;</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;登录&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Login</span>,<br>    &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>    routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>这里我们在路由中添加了一个<code>meta</code>属性，它一般用来存储路由的元信息，什么意思，就是我们可以通过这个对象来判断某个路由是否需要登录权限、页面标题、特定布局等等信息。</p><p>这里我们设置 <code>meta.needLogin</code> 来标识某个路由是否需要登录权限，通过 <code>meta.title</code> 来设置页面标题，然后在路由守卫中动态更改 <code>document.title</code>即可。</p><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>为什么路由守卫能做？</p><p>路由守卫是 Vue Router 中用于控制路由导航行为的功能。它允许在用户从一个路由导航到另一个路由之前、期间或之后执行自定义逻辑。</p><p>而<strong>全局前置路由守卫</strong>是在每次路由导航开始前都会被调用。</p><p>这样我们只需在路由跳转前，即全局前置路由守卫中去判断要去的路由是否需要登陆，并且判断用户是否登录即可！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;my-token&#x27;</span>); <span class="hljs-comment">//用户登陆自动生成的token</span><br><br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>; <span class="hljs-comment">//设置路由标题</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">meta</span>.<span class="hljs-property">needLogin</span> &amp;&amp; !token) &#123; <span class="hljs-comment">// 如果需要登录但是未登录，跳转到登录页面</span><br>        <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//否则放行</span><br>        <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在 Vue 中，实现路由拦截鉴权的核心是使用 Vue Router 提供的 <code>beforeEach</code> 全局前置守卫。在这个守卫函数中，我们可以根据路由的 <code>meta.needLogin</code> 属性，判断是否需要进行登录验证。如果用户未登录且访问了需要登录的页面，则重定向至登录页。</p><h2 id="在React中怎么实现"><a href="#在React中怎么实现" class="headerlink" title="在React中怎么实现"></a>在React中怎么实现</h2><p>Vue 中很容易实现，问题来了，React 中怎么做？</p><p>这里，我们使用 React Router 6的最新的路由配置写法，跟 Vue 简直不要太像</p><h3 id="配置路由-1"><a href="#配置路由-1" class="headerlink" title="配置路由"></a>配置路由</h3><p>首先第一步同样是配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-keyword">import</span> &#123; createBrowserRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Layout&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Home&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/About&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Login&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">index</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首页&#x27;</span>,<br>            <span class="hljs-attr">needLogin</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;关于&#x27;</span>,<br>            <span class="hljs-attr">needLogin</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>,<br>    &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>(routes);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>这里路由对象写法跟 Vue Router 不能说很像，只能说一模一样了，道理都一样，设置<code>meta</code>属性，将需要登录的路由，设置<code>needLogin</code>为<code>true</code>。</p><h3 id="1-组件内部直接判断"><a href="#1-组件内部直接判断" class="headerlink" title="1. 组件内部直接判断"></a>1. 组件内部直接判断</h3><p>跟 Vue 的区别来了，React 可没有路由守卫这一说法，但是道理都一样，我们只需在路由跳转页面展示前一刻判断是否需要登录以及用户是否登录。</p><p>但是React怎么实现在跳转前判断逻辑呢？</p><p>第一种方法，也是最好想的方法，直接在组件内部的 <code>useEffect</code> 钩子中进行判断，条件不满足重定向去登录即可。</p><p>我们知道<code>useEffect</code>在函数组件中充当特定的生命周期，就能在组件渲染前进行逻辑判断</p><p>以 Home 页面为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;my-token&#x27;</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!token) &#123;<br>      <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125;<br>  &#125;, [navigate, token]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>这里我们使用<code>useEffect</code>钩子，当页面初次加载或依赖项更新的时候就会重新执行，能够达到我们目的。</p><p>我们直接在组件加载前判断用户是否登录，哪里需要登录就在哪里判断，甚至省去了路由配置中的<code>meta</code>属性。</p><p>⚠️但是这种方法太笨了，每个需要登录的页面都需要单独写一套这样的代码，很明显可以复用。于是便有了下面这个方法。</p><h3 id="2-高阶组件"><a href="#2-高阶组件" class="headerlink" title="2. 高阶组件"></a>2. 高阶组件</h3><p>高阶组件本质上是一个函数，它接受一个组件作为输入，然后返回一个新的组件。我们可以在这个新组件渲染之前，即在父组件中操作，进行鉴权逻辑判断以实现类似 Vue 前置路由守卫的功能。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// router/Auth.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Navigate</span>, useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; routes, <span class="hljs-title class_">RouterWithTabAuthObject</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./&#x27;</span>;<br><br><span class="hljs-comment">// 获取当前路由的元数据</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getRouteMeta</span> = (<span class="hljs-params">path, routes</span>) =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> route <span class="hljs-keyword">of</span> routes) &#123;<br>        <span class="hljs-keyword">if</span> (route.<span class="hljs-property">path</span> === path) <span class="hljs-keyword">return</span> route;<br>        <span class="hljs-keyword">if</span> (route.<span class="hljs-property">children</span>) &#123;<br>            <span class="hljs-keyword">const</span> childRoute = <span class="hljs-title function_">getRouteMeta</span>(path, route.<span class="hljs-property">children</span>);<br>            <span class="hljs-keyword">if</span> (childRoute) <span class="hljs-keyword">return</span> childRoute;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Auth</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;my-token&#x27;</span>);<br><br>    <span class="hljs-keyword">const</span> currentRoute = <span class="hljs-title function_">getRouteMeta</span>(location.<span class="hljs-property">pathname</span>, routes);<br><br>    <span class="hljs-comment">// 设置页面标题</span><br>    <span class="hljs-keyword">if</span> (currentRoute?.<span class="hljs-property">meta</span>?.<span class="hljs-property">title</span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = currentRoute.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果需要登录但没有 token，重定向到登录页</span><br>    <span class="hljs-keyword">if</span> (currentRoute?.<span class="hljs-property">meta</span>?.<span class="hljs-property">needLogin</span> &amp;&amp; !token) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">replace</span> /&gt;</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Auth</span>;<br></code></pre></td></tr></table></figure><p>这里逻辑其实跟前置路由守卫是一致，只不过Vue帮你做了封装，显得代码没有那么多，比较简单。</p><p>我们来归纳一下，<code>beforeEach</code>可以直接通过<code>to.meta</code>直接拿到元数据，但是 React 需要判断当前<code>loaction</code>和<code>routes</code>路由对象进行查找才能找到对应的路由对象，即此处的<code>getRouteMeta</code>方法，如果有<code>children</code>还需要递归查找，其实 Vue 底层也是这样实现的。</p><p>然后通过条件判断和重定向实现鉴权，最后如果不需要重定向，正常渲染 <code>props.children</code>，即子组件。</p><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p><code>Auth</code>组件已经完成，还需要做一步操作，我们需要用这个高阶将所有路由包裹起来，才能发挥作用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Layout</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Aside</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Aside&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Header&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Auth</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router/Auth&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">View</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Auth</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Aside</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Auth</span>&gt;</span></span><br>    );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">View</span>;<br></code></pre></td></tr></table></figure><p>这里我一般习惯于将<code>Auth</code>包裹<code>&lt;Layout&gt;</code>组件，如果你没用到<code>Layout</code>，包裹<code>App</code>也是可以的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>在<code>Vue</code>中，实现路由拦截鉴权的核心就是使用 <code>beforeEach</code> 全局前置守卫。</p></li><li><p>在<code>React</code>中，暂且不考虑第一种组件内部判断的话，实现路由拦截鉴权就是将<strong>每个</strong>路由组件使用<strong>高阶组件</strong>进行包裹，在这个高阶组件里面进行权限相关逻辑的判断。</p></li></ul><p>总而言之，其实不管是 Vue 还是 React 两者的核心思想相同，都是在用户访问受保护页面前，检查其登录状态，并根据检查结果决定是否允许访问，如何找到这的时间点才是关键！</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速上手 TS（进阶类型篇）</title>
    <link href="/2024/07/03/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BTS%EF%BC%88%E8%BF%9B%E9%98%B6%E7%B1%BB%E5%9E%8B%E7%AF%87%EF%BC%89/"/>
    <url>/2024/07/03/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BTS%EF%BC%88%E8%BF%9B%E9%98%B6%E7%B1%BB%E5%9E%8B%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://juejin.cn/post/7383643463532953619">快速上手 TS（环境篇）- 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7386701961808904204">快速上手 TS（基础类型篇）- 掘金 (juejin.cn)</a></li></ul><p>前两篇中我介绍了 TS 从安装到运行的环境配置，以及 TS 的基础类型介绍，希望能够对你带来帮助。今天我们来学习一下 TS 的进阶知识，数组、元组、函数、接口等等，具体可以参考目录，还是那句话希望我能坚持更新，更希望你能坚持看下去！</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在 JS 中数组就是数组，但 TS 中的数组被分为了数组和元组</p><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>TS 数组有一个根本的特征，所有的成员类型必须相同，成员数量可以不确定。</p><p>数组有两种声明方式，类型后面加<code>[]</code>或者使用内置<code>Array</code>接口（下面会详细介绍接口 interface）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr2</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><p>如果成员类型有不同类型，可以使用联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: (<span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>)[] = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;阳阳羊&quot;</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr2</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;阳阳羊&quot;</span>];<br></code></pre></td></tr></table></figure><h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><p>数组的类型推断与前文讲的有所不同，它会根据每个成员的类型而变化</p><p>如果没有声明数组类型，TS 会自动进行类型推断，当数组为空时，会推断为<code>any</code>类型的数组</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89c40b0e3b3c48e1ba5fb62597e78793~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=295&h=86&s=4591&e=png&b=1f1f1f" alt="image.png" width="30%" /><p>当我们修改成员时，会自动进行更新。</p><p>这里我们<code>push</code>一个数字，会自动推断为<code>number</code>数组</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e381d85cb3742d282c8e2c8385aac75~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=302&h=143&s=7453&e=png&b=1f1f1f" alt="image.png" width="30%" /><p>我们再<code>push</code>一个字符串，自动推断成联合类型<code>string | number</code>的数组</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ed3af34f1a943718984afa42f7d5525~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=405&h=164&s=11903&e=png&b=1e1e1e" alt="image.png" width="50%" /><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是 TS 新增的数据类型，它表示成员类型可以自由设置的数组。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">tuple</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>] = [<span class="hljs-string">&quot;阳阳羊&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><p>写法上与数组有所不同，数组的类型是写在<code>[]</code>的左边，而元组的类型是写在<code>[]</code>内部。</p><p>使用元组时必须给出类型声明，不然会被 TS 自动推断为数组</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd3c5599c3b04805a490f0d506373b24~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=578&h=87&s=9894&e=png&b=1f1f1f" alt="image.png" width="50%" /><h4 id="可选符"><a href="#可选符" class="headerlink" title="?可选符"></a><code>?</code>可选符</h4><p>元组成员的类型可以添加问号后缀（<code>?</code>），表示该成员是可选的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">tuple</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>?] = [<span class="hljs-string">&quot;阳阳羊&quot;</span>, <span class="hljs-number">123</span>];<br></code></pre></td></tr></table></figure><p>需要注意的是可选成员要放在尾部，即所有可选成员必须在必选成员之后</p><p>如果放在前面会报错</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a91064aa2774f42ab530ec2ef5cee14~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=740&h=150&s=22684&e=png&b=1f1f1f" alt="image.png" width="70%" /><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="...扩展运算符"></a><code>...</code>扩展运算符</h4><p>一般情况下，元组的成员数量是固定的，有多少个类型声明就有多少个成员，但是<code>...</code>扩展运算符允许我们表示不定成员数量的元组。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">tuple</span>: [<span class="hljs-built_in">string</span>, ...<span class="hljs-built_in">number</span>[]] = [<span class="hljs-string">&quot;阳阳羊&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-number">456</span>];<br></code></pre></td></tr></table></figure><p>扩展运算符用在元组的任意位置都可以，但是只能扩展数组或元组。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的类型声明，需要给出参数和返回值的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里两个参数<code>a</code>、<code>b</code>类型都为<code>number</code>，以及返回值的类型<code>number</code>，返回值类型写在参数列表的圆括号后面。</p><p>我们也可以使用函数表达式进行声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-comment">//方式二</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">fn</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里的两种方式都可以实现，第一种是通过等号右边来推断<code>fn</code>的类型，第二种则是直接指明了<code>fn</code>的类型。</p><p>返回值类型通常可以不写，TS 会自己推断出来，如果没写<code>return</code>语句，会推断为没有返回值</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d54abea603554da3a2b998bbf727de04~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=494&h=138&s=13079&e=png&b=1f1f1f" alt="image.png" width="50%" /><h3 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h3><p>void 类型表示函数没有返回值。如果你学过 c 语言，那你一定不会陌生。</p><p>在 TS 中<code>void</code>并不代表不能写<code>return</code>语句，它允许返回<code>undefined</code>或<code>null</code>（<code>null</code>需要关闭严格模式），因为它俩在 TS 看来也是相当于没有返回值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果你返回其它类型就会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b; <span class="hljs-comment">//报错</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76765d6f43fc4fabb8edf79d0ebc8efa~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=569&h=162&s=18617&e=png&b=272728" alt="image.png" width="70%" /><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>有些函数可以接受不同类型或不同个数的参数，并且根据参数的不同，会有不同的函数行为。这种根据参数类型不同，执行不同逻辑的行为，称为函数重载。</p><p>这里我们想实现一个函数，不管你传入的是数组还是字符串，我都希望它返回一个反转后的结果</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">reverse</span>(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">// &#x27;cba&#x27;</span><br><span class="hljs-title function_">reverse</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">// [3, 2, 1]</span><br></code></pre></td></tr></table></figure><p>首先我们逐一定义每一种情况的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params"><span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params"><span class="hljs-attr">arr</span>: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-built_in">any</span>[];<br></code></pre></td></tr></table></figure><p>然后给予函数完整的类型声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params"><span class="hljs-attr">stringOrArray</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-built_in">string</span> | <span class="hljs-built_in">any</span>[] &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> stringOrArray === <span class="hljs-string">&quot;string&quot;</span>)<br>    <span class="hljs-keyword">return</span> stringOrArray.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> stringOrArray.<span class="hljs-title function_">slice</span>().<span class="hljs-title function_">reverse</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>([<span class="hljs-string">&quot;🐂&quot;</span>, <span class="hljs-string">&quot;🐑&quot;</span>, <span class="hljs-string">&quot;🐎&quot;</span>, <span class="hljs-string">&quot;🐒&quot;</span>])); <span class="hljs-comment">//[ &#x27;🐒&#x27;, &#x27;🐎&#x27;, &#x27;🐑&#x27;, &#x27;🐂&#x27; ]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>(<span class="hljs-string">&quot;牛羊马猴&quot;</span>)); <span class="hljs-comment">//猴马羊牛</span><br></code></pre></td></tr></table></figure><h2 id="type-命令"><a href="#type-命令" class="headerlink" title="type 命令"></a>type 命令</h2><p>TS 允许我们用 type 来定义一个类型别名，我们习惯使用大驼峰命名方式进行命名。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Name</span> = <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-title class_">Name</span> = <span class="hljs-string">&quot;阳阳羊&quot;</span>;<br></code></pre></td></tr></table></figure><p>这样<code>Age</code>就能像使用<code>number</code>一样作为类型来使用</p><p>别名不允许重名，拿值类型来举例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Color</span> = <span class="hljs-string">&quot;红&quot;</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Color</span> = <span class="hljs-string">&quot;绿&quot;</span>; <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p>如果一些类型定义很冗长，我们往往会用 type 命令为函数类型定义一个别名。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MyFunc</span> = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">fn</span>: <span class="hljs-title class_">MyFunc</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello &quot;</span> + a);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h2><p>interface 是对象的模板，可以看作是一种类型约定，中文译为“接口”。使用了某个模板的对象，就拥有了指定的类型结构。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们定义了一个接口<code>Person</code>，两个属性<code>name</code>和<code>age</code>，任何实现这个接口的对象都必须具有这两个属性，并符合规定类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">me</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;阳阳羊&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果属性和类型有一个不符就会报错。</p><p>如果你希望属性是可选的，则可以使用<code>?</code>可选操作符，只读可以使用<code>readonly</code>修饰符</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  name?: <span class="hljs-string">&quot;阳阳羊&quot;</span>;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>除了属性外，接口还允许我们定义对象的方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">say</span>(<span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>接口也可以用来声明独立的函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Add</span> &#123;<br>  (<span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">myAdd</span>: <span class="hljs-title class_">Add</span> = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;<br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>接口可以使用<code>extends</code>关键字实现继承</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>extends</code>关键字会从继承的接口里面拷贝属性类型，这样就不必书写重复的属性</p><p>如果子接口与父接口存在同名属性，那么子接口的属性会覆盖父接口的属性。前提是不能有冲突，属性方法他们的类型得是一致的，不然会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">bigint</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里存在同名属性，但是类型不一致</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3634c66ca59942e287f2cde4ae39687c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=519&h=226&s=30080&e=png&b=272728" alt="image.png"></p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>多个同名接口会合并成一个接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Box</span> &#123;<br>  <span class="hljs-attr">height</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">width</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Box</span> &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个<code>Box</code>接口会合并成一个接口，同时有<code>height</code>、<code>width</code>和<code>length</code>三个属性。前提仍然是不能有冲突。</p><h3 id="和-type-的区别"><a href="#和-type-的区别" class="headerlink" title="和 type 的区别"></a>和 type 的区别</h3><p>（1）<code>type</code>能够表示非对象类型，而<code>interface</code>只能表示对象类型（包括数组、函数等）。</p><p>（2）<code>interface</code>可以继承其他类型，<code>type</code>不支持继承。</p><p>（3）同名<code>interface</code>会自动合并，同名<code>type</code>则会报错。也就是说，TypeScript 不允许使用<code>type</code>多次定义同一个类型。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://typescript.p6p.net/typescript-tutorial/types.html">阮一峰 TypeScript 教程</a></li><li><a href="https://www.typescriptlang.org/">TypeScript 官方文档</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上是对 TS 进阶类型的基本介绍，内容相对于基础，对于新同学来说比较友好，后面我会继续更新进阶知识，关于类、泛型、Enum 类型等等，可以收藏本站，我会持续更新。</p><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速上手 TS（基础类型篇）</title>
    <link href="/2024/07/02/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%20TS%EF%BC%88%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E7%AF%87%EF%BC%89/"/>
    <url>/2024/07/02/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%20TS%EF%BC%88%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><a href="https://juejin.cn/post/7383643463532953619">快速上手 TS（环境篇）- 掘金 (juejin.cn)</a></li></ul><p>上一篇中我介绍了 TS 从安装到运行的环境配置，希望能够对你带来帮助。今天我们来学习一下 TS 的一些基本知识，TS 知识可多了，一篇文章当然不能涵盖，所以我会写多篇文章进行介绍，希望我能坚持更新，更希望你能坚持看下去！</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>你在写 JS 的时候有没有想过这样一个问题：为什么 JS 不用写类型，不写类型带来的后果是什么？如果你尝试写过任意一门后端语言，你就会发现，每个类型都有自己声明的方式，而不是一味的 let、const，换句话说，弱类型会导致什么后果？</p><p>JS 设计之初的目标是成为一种简单易用的脚本语言，能够让非专业程序员快速学习，因此，JS 遵循动态类型系统，如果代码出现错误，只能在运行时才能发现，而 TS 跟一些后端语言一样提供的静态类型检测，能够在编译时就发现错误，避免一些不必要的失误。</p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><p>TS 允许我们在 JS 的基础上对变量进行声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span>;<br></code></pre></td></tr></table></figure><p>这段代码中，TS 允许我们在声明的变量后面用<code>:</code>接类型，表示我们声明了一个什么类型的变量。</p><p>如果你给变量赋的值不属于该类型，就会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-number">123</span>; <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p>这里我们把数字<code>123</code>赋给一个声明为<code>string</code>的变量，就会报错。</p><p>另外，如果变量在赋值之前被使用了，也会报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p>如果在 JS 环境则不会报错，而是打印 <code>undefined</code></p><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>类型声明不是必须的，因为 TS 可以根据你的赋值推断出类型，这是 TS 比较厉害的一点</p><p>如果你正常的像</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> num = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>你把鼠标放到上面就能看到它被推断出的类型</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8916287c61914b15a727d482e6434583~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=259&h=96&s=4237&e=png&b=1f1f1f" alt="image.png" width="30%" /><p>另外，它还能推断出返回值的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"><span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Number</span>(str);<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们只需要知道这里用 TS 声明了一个函数（关于函数具体如何声明后面会讲），接收一个 string 类型的参数 str，但是没有声明返回值的类型，TS 自己推断出来了</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e045d1f88e548c0885a85125fbd455f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=472&h=133&s=12681&e=png&b=1f1f1f" alt="image.png" width="50%" /><p>这里可以看出，类型声明是可选的，你可以加，也可以不加，只是不能保证 TS 会正确推断出类型。</p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><p>TS 继承了 JS 的类型，在这个基础上进行升级，形成了一套自己的类型系统</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>我们知道 JS 有七大基本类型和对象类型，下面我会将每一个类型都拎出来讲</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">flag</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">bigint</span>: <span class="hljs-built_in">bigint</span> = <span class="hljs-number">123n</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">symbol</span>: <span class="hljs-built_in">symbol</span> = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-attr">un</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">nu</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h4 id="number-类型"><a href="#number-类型" class="headerlink" title="number 类型"></a>number 类型</h4><p>number 类型包含所有整数和浮点数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xffff</span>;<br></code></pre></td></tr></table></figure><h4 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h4><p>普通字符串和模板字符串都属于 string 类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;x&#125;</span> world`</span>;<br></code></pre></td></tr></table></figure><h4 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h4><p>boolean 类型只包含<code>true</code>和<code>false</code>，就没什么好说的了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h4 id="bigint-类型"><a href="#bigint-类型" class="headerlink" title="bigint 类型"></a>bigint 类型</h4><p>bigint 类型包含所有的大整数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">bigint</span> = <span class="hljs-number">123n</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">bigint</span> = <span class="hljs-number">0xffffn</span>;<br></code></pre></td></tr></table></figure><p>但是要注意的是 bigint 与 number 相互不兼容，意思是当给 bigint 类型赋值 number 时会报错，反过来也是。</p><h4 id="symbol-类型"><a href="#symbol-类型" class="headerlink" title="symbol 类型"></a>symbol 类型</h4><p>symbol 类型包含所有的 Symbol 值，用的较少，咱们就一笔带过</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">symbol</span> = <span class="hljs-title class_">Symbol</span>();<br></code></pre></td></tr></table></figure><h4 id="undefined-和-null-类型"><a href="#undefined-和-null-类型" class="headerlink" title="undefined 和 null 类型"></a>undefined 和 null 类型</h4><p>如果没有声明类型的变量，被赋值为<code>undefined</code>或<code>null</code>，默认情况下它们的类型会被推断为<code>any</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// any</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// any</span><br><br><span class="hljs-keyword">let</span> c = <span class="hljs-literal">null</span>; <span class="hljs-comment">// any</span><br><span class="hljs-keyword">const</span> d = <span class="hljs-literal">null</span>; <span class="hljs-comment">// any</span><br></code></pre></td></tr></table></figure><p>如果希望避免这种情况，则需要打开编译选项<code>strictNullChecks</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 打开编译设置 strictNullChecks</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">let</span> c = <span class="hljs-literal">null</span>; <span class="hljs-comment">// null</span><br><span class="hljs-keyword">const</span> d = <span class="hljs-literal">null</span>; <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><p>将所有类型都列出来大概就这么多，看起来好像跟 JS 没多大差别，就加了个类型声明罢了，真的是这样吗，咱们接着往下看</p><h3 id="any、unknown、never-类型"><a href="#any、unknown、never-类型" class="headerlink" title="any、unknown、never 类型"></a>any、unknown、never 类型</h3><p>TS 新增了 any、unknown 和 never 三种类型，分别有着不同的应用场景</p><h4 id="any-类型"><a href="#any-类型" class="headerlink" title="any 类型"></a>any 类型</h4><p>any 类型的变量可以被赋为任何值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">any</span>;<br><br>x = <span class="hljs-number">1</span>;<br>x = <span class="hljs-string">&quot;阳阳羊&quot;</span>;<br>x = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>这个类型一般不推荐使用，因为 TS 不会对 any 类型的变量进行类型检查，即使有明显的类型错误，只要句法正确，都不会报错。意思你声明的 string 类型变量甚至可以拿来当函数给调用掉，并且都不会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;阳阳羊&quot;</span>;<br><span class="hljs-title function_">x</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>如果每个变量类型都是 any，就失去了 TypeScript 的意义，直接写 JS 就好了 😂</p><h4 id="unknown-类型"><a href="#unknown-类型" class="headerlink" title="unknown 类型"></a>unknown 类型</h4><p><code>unknown</code>类型的变量，不能直接赋值给其他类型的变量（除了<code>any</code>类型和<code>unknown</code>类型）</p><p>避免了污染问题</p><p>不能直接调用<code>unknown</code>类型变量的方法和属性</p><p>可以赋值给任意其他类型</p><h4 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h4><p>意为空类型，不可能有这样的值，不可能赋给它任何值，否则都会报错。后面会用交叉类型进行举例</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>在 JS 中我们将非基本类型的类型统称为对象类型，这其中包括了对象、数组、函数、包装类、正则等等</p><h4 id="Object-与-object-类型"><a href="#Object-与-object-类型" class="headerlink" title="Object 与 object 类型"></a>Object 与 object 类型</h4><p>为什么要区分大小写呢？这是因为我们将 Object 称为广义上的对象，它囊括了几乎所有的值，原始类型值、对象、数组、函数都是合法的<code>Object</code>类型，除了<code>undefined</code>和<code>null</code>不能转为对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>: <span class="hljs-title class_">Object</span>;<br><br>obj = <span class="hljs-literal">true</span>;<br>obj = <span class="hljs-string">&quot;hi&quot;</span>;<br>obj = <span class="hljs-number">1</span>;<br>obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">123</span> &#125;;<br>obj = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>obj = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> a + <span class="hljs-number">1</span>;<br>obj = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 报错</span><br>obj = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>而小写的 object 就是我们狭义说的对象，即可以用字面量表示的对象，只包含对象、数组和函数，不包括原始类型的值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">object</span> = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">123</span> &#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">object</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> <span class="hljs-attr">z</span>: <span class="hljs-built_in">object</span> = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> n + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="包装类对象"><a href="#包装类对象" class="headerlink" title="包装类对象"></a>包装类对象</h4><p>由于包装对象的存在，导致每一个原始类型的值都有包装对象和字面量两种情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 包装类对象</span><br></code></pre></td></tr></table></figure><p>为了进行区分，TS 对五种原始类型分别提供了大写和小写两种类型。</p><ul><li>Boolean 和 boolean</li><li>String 和 string</li><li>Number 和 number</li><li>BigInt 和 bigint</li><li>Symbol 和 symbol</li></ul><p>大写类型同时包含包装对象和字面量两种情况，小写类型只包含字面量，不包含包装对象。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">s1</span>: <span class="hljs-title class_">String</span> = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">s2</span>: <span class="hljs-title class_">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 正确</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">s3</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">s4</span>: <span class="hljs-built_in">string</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>这里<code>String</code>类型可以赋值为字符串的字面量，也可以赋值为包装对象。但是，<code>string</code>类型只能赋值为字面量，赋值为包装对象就会报错。</p><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>TS 允许一个值成为一个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">x</span>: <span class="hljs-string">&quot;hello&quot;</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure><p>用<code>const</code>声明的变量，如果没有注明类型，则会把它推断为值类型</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffd019c1c25744bea099dad24fedd652~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=286&h=88&s=5528&e=png&b=1f1f1f" alt="image.png" width="30%" /><p>而<code>let</code>则不会</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05d2a56546814fd2b3121395ad2ec747~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=234&h=94&s=4604&e=png&b=1f1f1f" alt="image.png" width="30%" /><p>这个原因显而易见，因为<code>const</code>声明的变量不可修改，即常量，但如果声明是对象的话，那就另外谈了，因为对象存的是地址，属性值可以改变，所以并不会推断为值类型。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06c5d56dd8c845f78aeb2dd3fd8b8ea5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=373&h=191&s=9037&e=png&b=1e1e1e" alt="image.png" width="50%" /><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型指的是多个类型组成的一个新类型，使用符号<code>|</code>拼接。我们知道<code>|</code>是<code>或</code>的意思，所以<code>A|B</code>的意思是只要属于<code>A</code>或<code>B</code>其中一个就行了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br><br>x = <span class="hljs-number">123</span>; <span class="hljs-comment">// 正确</span><br>x = <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure><p>当联合类型与值类型结合，就可以表示一个变量可能有多个值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;红&quot;</span> | <span class="hljs-string">&quot;黄&quot;</span> | <span class="hljs-string">&quot;绿&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>有<code>|</code>当然有<code>&amp;</code>，不出所料这个意思应该是<code>与</code>。<code>A&amp;B</code>表示，任何一个类型必须同时属于<code>A</code>和<code>B</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">z</span>: <span class="hljs-built_in">number</span> &amp; <span class="hljs-built_in">string</span>;<br></code></pre></td></tr></table></figure><p>什么类型能兼具<code>number</code>和<code>string</code>？</p><p>当然是不存在的，TS 新增了一个类型表示不存在的<code>never</code>，这里也可以用它来声明</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1df706673b3a4e2a928eb67083144c21~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=271&h=99&s=5356&e=png&b=1f1f1f" alt="image.png" width="30%" /><p>交叉类型的主要用途是表示对象的合成。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">person</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> &#125; &amp; &#123; <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> &#125;;<br><br>person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;阳阳羊&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://typescript.p6p.net/typescript-tutorial/types.html">阮一峰 TypeScript 教程</a></li><li><a href="https://www.typescriptlang.org/">TypeScript 官方文档</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上是对 TS 类型的简单介绍，对于新同学来说应该很容易入手，后面我会继续更新进阶知识，关于 type、元祖、接口、泛型等等，我会持续更新。</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何将提交说明（commit message）导出到指定文件？</title>
    <link href="/2024/06/26/%E5%A6%82%E4%BD%95%E5%B0%86%E6%8F%90%E4%BA%A4%E8%AF%B4%E6%98%8E%EF%BC%88commit%20message%EF%BC%89%E5%AF%BC%E5%87%BA%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
    <url>/2024/06/26/%E5%A6%82%E4%BD%95%E5%B0%86%E6%8F%90%E4%BA%A4%E8%AF%B4%E6%98%8E%EF%BC%88commit%20message%EF%BC%89%E5%AF%BC%E5%87%BA%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司里总会有一些有趣的需求，这不，mentor：“你去调研一下，看怎么把 commit 提交说明导出到一个 txt 文件里，条目的话最好可以指定，后续我们……”。刚开始接到这个任务还是挺忙蒙的，网上应该有这个功能的第三方包吧？但是在我查询多方资料，发现 Git 真 🐂，哪需要什么第三方包！</p><p>我在一个 git 学习的网站看到这句话真绷不住，赶紧跟大家分享一下</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/841eec7d5078487ebc2f15ba3a5a8756~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=842&h=130&s=15474&e=png&b=fefefe" alt="image.png" width="70%" /><p>假如我真的学完了 16 章的内容，然后你跟我说还没入门？这我学集贸啊 😂。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9d7c8aae7eb4f68b6268f1ec3c72adf~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=321&h=737&s=36251&e=png&b=fefefe" alt="image.png" width="30%" /><p>行了，闲话少说，我们步入正题，开始今天的分享。</p><h2 id="拿到提交说明"><a href="#拿到提交说明" class="headerlink" title="拿到提交说明"></a>拿到提交说明</h2><p>我们如果想查看<code>commit</code>的内容，可以<code>git show</code>查看详细信息，它可以显示最新提交的详细信息，包括作者、日期、提交说明和每个文件的变更内容。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08cabde444e440018e9a95c357768b6d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=665&h=294&s=21106&e=png&b=1e1e1e" alt="image.png"></p><p>但是这里只能展示最新提交，而我们的需求是可以指定条目的 commit 提交说明，而这里只显示一条，显然不满足需求。</p><p>然后又找到<code>git log</code>，允许我们查看 git 仓库的提交历史，它会按照时间顺序列出提交记录，并可以显示提交的哈希值、作者、日期、提交信息等信息。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a5de345be0e492b8e76588ff5ac604e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=693&h=376&s=27111&e=png&b=1e1e1e" alt="image.png"></p><p>这不正是我们想要的吗，看看怎么单独拿到提交说明。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b4a6454cd0d4d609d35f1b35ece3f57~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=674&h=200&s=29029&e=png&b=fbfbf8" alt="image.png"></p><p><a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History">git 文档</a>中提到了<code>--pretty</code>这个选项，它允许日志输出默认格式以外的格式！如果我可以将输出只显示提交说明那不是美哉，于是我继续看文档。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1719fc5f89d4d4fa885d63a6f3e7628~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=671&h=230&s=24282&e=png&b=f7f6f5" alt="image.png"></p><p>然后选项值为<code>format</code>时，我们就可以指定输出格式，它提供一些占位符允许我们自定义输出，文档中也对每个占位进行列举。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1064fd81ccbc41e6bfb34f69fff7a85f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=440&h=773&s=30905&e=png&b=fcfcfa" alt="image.png"></p><p>其中<code>%s</code>就是我们需要的提交说明，试试看！</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fd5492cbdcd4ab485408e2778e7ad4e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=387&h=139&s=6332&e=png&b=1e1e1e" alt="image.png"></p><p>果然成功拿到！成就感爆棚了。</p><h2 id="导出到指定文件"><a href="#导出到指定文件" class="headerlink" title="导出到指定文件"></a>导出到指定文件</h2><p>我们离成功只差一步，现在我们只是在终端看到结果，怎么将终端的数据导到本地文件呢？</p><p>git 有一个打包文件的方法<code>git archive</code>，这个命令本身并不支持包含提交说明字段的功能。它主要用于将指定的提交、分支或标签的代码打包成归档文件，主要关注代码本身而非提交历史，而不包含 Git 仓库的元数据（如提交历史、提交说明等），所以行不通。</p><p>查了一些资料，发现已经用不着 Git 了，既然是在控制台显示，那我就用控制台的方法呗。</p><h3 id="重定向操作符-，"><a href="#重定向操作符-，" class="headerlink" title="重定向操作符&gt;，&gt;&gt;"></a>重定向操作符<code>&gt;</code>，<code>&gt;&gt;</code></h3><p>在大多数命令行环境中，可以使用<code>&gt;</code>将控制台输出保存到文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> &gt; log.txt<br></code></pre></td></tr></table></figure><p>这行命令将会把我们的日志保存到当前目录下的<code>log.txt</code>文件中，如果已经存在<code>log.txt</code>文件则会进行覆盖操作。</p><p>而<code>&gt;&gt;</code>则会将输出追加到文件末尾，而不覆盖原有内容。</p><h3 id="PowerShell-脚本"><a href="#PowerShell-脚本" class="headerlink" title="PowerShell 脚本"></a>PowerShell 脚本</h3><p>如果你使用 PowerShell，也可以通过脚本来执行 Git 命令并将输出进行保存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git log | <span class="hljs-built_in">Out-File</span> <span class="hljs-literal">-FilePath</span> log.txt<br></code></pre></td></tr></table></figure><hr><p>因为我是用 VScode，它自带的就是 PowerShell，所以就用 PowerShell 脚本给大家进行展示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%s&quot;</span> | Out-File -FilePath commit_messages.txt<br></code></pre></td></tr></table></figure><p>执行完命令，我们可以在当前目录下看到新生成的<code>commit_messages.txt</code>文件。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04482d43ef534b0893bb07858a5d6e02~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=391&h=411&s=39493&e=png&b=1e1e1e" alt="image.png" width="50%" /><p>当当，成功导入 txt 文件，但是我们发现文件里的中文全是乱码，为什么会这样？</p><h2 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h2><p><strong>1. 在导出的时候明确编码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%s&quot;</span> | Out-File -FilePath commit_messages.txt -Encoding utf8<br></code></pre></td></tr></table></figure><p>但是发现并不奏效</p><p><strong>2. 设置 Git 输出编码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global i18n.logOutputEncoding gb2312<br></code></pre></td></tr></table></figure><p>这里我将 git 输出的编码格式改为 gb2312，再次执行导出操作，发现乱码消失。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0b2830415434d2788d899f0ad0cf3ea~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=324&h=355&s=27528&e=png&b=1e1e1e" alt="image.png"></p><h2 id="指定输出条目和格式"><a href="#指定输出条目和格式" class="headerlink" title="指定输出条目和格式"></a>指定输出条目和格式</h2><p>现在我们想实现输出最新的 20 条数据，并且标上序号（如<code>1.</code>）</p><p>想要指定条目，我们只需加上<code>-n + 数字</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -n 20<br></code></pre></td></tr></table></figure><p>这里表示指定输出最新的 20 条日志信息</p><p>加上序号的话，我们可以创建一个计数器，然后对每行内容进行拼接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$counter</span> = 1<br>git <span class="hljs-built_in">log</span> -n 20 --pretty=format:<span class="hljs-string">&quot;%s&quot;</span> | ForEach-Object &#123;<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$counter</span>. <span class="hljs-variable">$_</span>&quot;</span> | Out-File -FilePath commit_messages.txt -Append<br>    <span class="hljs-variable">$counter</span>++<br>&#125;<br></code></pre></td></tr></table></figure><p><code>$counter = 1</code>初始化一个计数器，初始值为 1</p><p><code>ForEach-Object&#123;&#125;</code>是对输出的每一条进行单独的操作，这里进行拼接操作</p><p><code>-Append</code>将内容追加到文末，而不是覆盖</p><p><strong>最终效果</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4e44519d6f84090991db1aa63ffc250~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=671&h=605&s=65520&e=png&b=1e1e1e" alt="image.png"></p><hr><p>调研完，不出意外的就要出意外了……</p><p>mentor：你现在再调研一下然后实现两种方式：</p><p>可以指定到具体更新了多少内容，比如说可能有两种情况：用 tag 进行区分，上次的 tag 到本次 tag 之间的 commit messages，对这个区间进行导出；另一种情况就是，拉一个新分支进行开发，新分支的最后一次提交到主分主的最后一次提交，这个区间进行导出。</p><p>这些我们后期会针对不同的场景进行实施……</p><h2 id="一些前驱知识"><a href="#一些前驱知识" class="headerlink" title="一些前驱知识"></a>一些前驱知识</h2><h3 id="区间符"><a href="#区间符" class="headerlink" title="区间符.."></a>区间符..</h3><p><code>..</code>允许我们指定输出的区间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> master..HEAD<br></code></pre></td></tr></table></figure><p>输出从 master 的最新提交到当前项目的 HEAD</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="^操作符"></a>^操作符</h3><p><code>^</code> 操作符用于指定父提交</p><p>父提交指一个提交的上一个提交。每个提交都有一个或多个父提交，具体取决于它是普通提交还是合并提交。</p><h4 id="普通提交"><a href="#普通提交" class="headerlink" title="普通提交"></a>普通提交</h4><p>对于普通提交，每个提交只有一个父提交。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>-<span class="hljs-attr">--B---C---D</span><br></code></pre></td></tr></table></figure><ul><li>提交 <code>D</code> 的父提交是 <code>C</code>。</li><li>提交 <code>C</code> 的父提交是 <code>B</code>。</li><li>提交 <code>B</code> 的父提交是 <code>A</code>。</li></ul><p>在这种情况下：</p><ul><li><code>D^</code> 或 <code>D^1</code> 表示提交 <code>D</code> 的父提交 <code>C</code>。</li></ul><h4 id="合并提交"><a href="#合并提交" class="headerlink" title="合并提交"></a>合并提交</h4><p>合并提交是指将两个或多个分支合并在一起时产生的提交。合并提交有两个或更多的父提交。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>-<span class="hljs-attr">--B---C---E</span>  (<span class="hljs-selector-tag">main</span>)<br>     \     /<br>      D-<span class="hljs-attr">--F</span>   (feat-test)<br></code></pre></td></tr></table></figure><ul><li><p>提交 <code>E</code> 是一个合并提交，合并了 <code>feat-test</code> 到 <code>main</code>。</p></li><li><p>提交 <code>E</code> 有两个父提交：</p><ul><li>第一个父提交 <code>C</code>，表示 <code>main</code> 分支在合并前的最后一个提交。</li><li>第二个父提交 <code>F</code>，表示 <code>feat-test</code> 的最后一个提交。</li></ul></li></ul><p>在这种情况下：</p><ul><li><code>E^1</code> 表示提交 <code>E</code> 的第一个父提交 <code>C</code>。</li><li><code>E^2</code> 表示提交 <code>E</code> 的第二个父提交 <code>F</code>。</li></ul><p>搞清楚这些，那我们的工作就好开展了</p><h2 id="使用-Tag-进行区间导出"><a href="#使用-Tag-进行区间导出" class="headerlink" title="使用 Tag 进行区间导出"></a>使用 Tag 进行区间导出</h2><p>假设你有两个 tag，分别为 <code>v1.0</code> 和 <code>v2.0</code>，你想导出这两个 tag 之间的 commit messages</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$counter</span> = 1<br>git <span class="hljs-built_in">log</span> v1.0..v2.0 --pretty=format:<span class="hljs-string">&quot;%s&quot;</span> | ForEach-Object &#123;<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$counter</span>. <span class="hljs-variable">$_</span>&quot;</span> | Out-File -FilePath commit_messages.txt -Append<br>    <span class="hljs-variable">$counter</span>++<br>&#125;<br></code></pre></td></tr></table></figure><p><code>v1.0..v2.0</code>就可以指定两个 tag 之间</p><h2 id="从新分支的最后一次提交到主分支的最后一次提交"><a href="#从新分支的最后一次提交到主分支的最后一次提交" class="headerlink" title="从新分支的最后一次提交到主分支的最后一次提交"></a>从新分支的最后一次提交到主分支的最后一次提交</h2><p>假设你有一个新分支 <code>feat-test</code> 和主分支 <code>main</code>，这种就要分情况了，可能是合并前也可能是合并后</p><h3 id="合并前"><a href="#合并前" class="headerlink" title="合并前"></a>合并前</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#合并前</span><br><span class="hljs-variable">$counter</span> = 1<br>git <span class="hljs-built_in">log</span> main..feat-test --pretty=format:<span class="hljs-string">&quot;%s&quot;</span> | ForEach-Object &#123;<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$counter</span>. <span class="hljs-variable">$_</span>&quot;</span> | Out-File -FilePath commit_messages.txt -Append<br>    <span class="hljs-variable">$counter</span>++<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="合并后"><a href="#合并后" class="headerlink" title="合并后"></a>合并后</h3><p>合并后的话只需要将开始指向合并前的最后一次提交，不就是 main 的第一个父提交吗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> main^..HEAD<br></code></pre></td></tr></table></figure><p>over</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/10330425/how-do-i-export-a-git-log-to-a-text-file">How do I export a Git log to a text file?</a></li><li><a href="https://git-scm.com/docs">Git 官方文档</a></li><li><a href="https://b1f6c1c4.gitbook.io/learn-git-the-super-hard-way">learn-git-the-super-hard-way</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速上手 TS（环境篇）</title>
    <link href="/2024/06/24/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%20TS%EF%BC%88%E7%8E%AF%E5%A2%83%E7%AF%87%EF%BC%89/"/>
    <url>/2024/06/24/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%20TS%EF%BC%88%E7%8E%AF%E5%A2%83%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li><a href="https://juejin.cn/post/7377320107929829388">只会 Vue 的我，上班第一天就要我写 React+TS，是种什么样的体验？</a></li><li><a href="https://juejin.cn/post/7379157261426655273">只会 Vue，快速上手 React（React Router 篇）</a></li></ol><p>在前面两篇文章中，我分享了自己从 Vue 转 React 的心得，希望对大家有所帮助，今天再给大家分享一下如何搭建 TS 的学习环境。</p><h2 id="为什么要学习-TS"><a href="#为什么要学习-TS" class="headerlink" title="为什么要学习 TS"></a>为什么要学习 TS</h2><p>从铺天盖地的 TS 教程，到 Vue3 被 TS 重写，种种迹象就可以见得 TS 的地位越来越重，TS 给我们开发到底带来了什么？用 JS 就不行吗？</p><p>TS 的静态类型系统允许我们在开发阶段就可以发现错误，通过显示类型注解和类型推断，让我们在团队开发中协作，TS 引入面向对象编程特效，接口泛型让我们可以写更 👍 的代码。</p><h2 id="TS-和-JS-的关系"><a href="#TS-和-JS-的关系" class="headerlink" title="TS 和 JS 的关系"></a>TS 和 JS 的关系</h2><p>一句话解释就是 TS 是 JS 的超集。</p><p>TS 与 C、Java 等众多后端语言类似，都需要先对代码进行编译才能运行。具体来说，TS 会将代码编译成浏览器或者 Node 能够读懂的 JS 代码。每次运行 TS 代码，首先需要通过 tsc 将其编译成 JS 文件，可能会生成不止一个 JS 文件。然后，我们就能够利用 TS 提供的高级特性来编写代码，同时确保最终生成的 JS 代码仍然能够成功运行。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装-TS"><a href="#安装-TS" class="headerlink" title="安装 TS"></a>安装 TS</h3><p>TS 支持全局安装和本地安装，全局顾名思义就是我们可以在任意控制台运行 TS，适合个人开发配置。而本地安装则更适用于团队开发，确保项目中使用相同版本的 TS。</p><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i typescript -g<br></code></pre></td></tr></table></figure><p>安装完毕，现在控制台允许我们使用 ts 编译器，执行 tsc 命令，输入以下指令查看 TS 版本，如果可以看到，则说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc -v<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d96e0282663d48bea7ea3396119af66b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=271&h=37&s=2623&e=png&b=1e1e1e" alt="image.png"></p><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i --save-dev typescript<br></code></pre></td></tr></table></figure><p>然后我们可以使用 npx 来运行 TS 编译器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx tsc -v<br></code></pre></td></tr></table></figure><p>同样，如果可以看到 ts 版本，则说明安装成功</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在运行 TS 代码之前，我们需要对目录进行初始化，执行以下命令会生成一个<code>tsconfig.json</code>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc --init<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04a56ebd53724658bd1cd70ec938995f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=669&h=227&s=11860&e=png&b=1e1e1e" alt="image.png"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f310e1e5007b464094d4caec62ae12b6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=207&h=68&s=2742&e=png&b=252526" alt="image.png"></p><h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><p><code>tsconfig.json</code>顾名思义允许我们对 TS 进行配置，其中一些重要的配置项</p><p>一个典型的<code>tsconfig.json</code>文件结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 编译选项</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">// 包含的文件或目录</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">// 排除的文件或目录</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-comment">// 需要编译的特定文件</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>compilerOptions</code>可以配置 TS 编译器行为，常用配置项包括以下几个：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es2016&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//指定编译后代码的ES版本</span><br><span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commonjs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//指定生成的模块系统</span><br><span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//开启严格模式</span><br><span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//指定编译后的文件输出的目录</span><br><span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//指定JSX代码的编译方式</span><br><span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>  <span class="hljs-comment">//允许编译JS文件</span><br></code></pre></td></tr></table></figure><p>其实这些在<code>tsconfig.json</code>文件都有注解，这里就不过多赘述</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1714b0fcce4285adb4b4e7b88dd828~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1268&h=409&s=76064&e=png&b=1e1e1e" alt="image.png"></p><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>首先我们在目录下创建一个<code>.ts</code>文件，在里面书写我们需要运行的代码。</p><p>🙋‍♀️🌰 创建一个 ts 文件，内容如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//1.ts</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">nickname</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;阳阳羊&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nickname);<br></code></pre></td></tr></table></figure><p>接着我们在控制台输入<code>tsc</code>命令，目录会生成一个对应的 JS 文件</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/306dca1cb3054ddc9ea339aa6e58230b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=286&h=41&s=2761&e=png&b=1e1e1e" alt="image.png"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cd21a3abacd432f85a0028156f0784b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=148&h=89&s=2641&e=png&b=252526" alt="image.png"></p><p>tsc 将 ts 文件编译成了 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.js</span><br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">let</span> nickname = <span class="hljs-string">&quot;阳阳羊&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nickname);<br></code></pre></td></tr></table></figure><p>但是每当我们修改 TS 代码又需要重新执行一次<code>tsc</code>，很麻烦，TS 提供了一个指令<code>tsc --watch</code>（简写<code>tsc -w</code>）执行这段命令后，编译器会持续监听文件内容的变化，然后更新编译后的 JS 文件，就不用每次手动编译。</p><p>拿到编译好的 JS 文件，我们执行 node 命令运行这个编译后的文件即可。</p><h4 id="三方运行工具"><a href="#三方运行工具" class="headerlink" title="三方运行工具"></a>三方运行工具</h4><p>如果你觉得以上运行方式太复杂了，你可以安装第三方工具，这里我介绍两种，如果有好用的，欢迎大家在评论区分享！</p><h5 id="ts-node"><a href="#ts-node" class="headerlink" title="ts-node"></a>ts-node</h5><p>在控制台输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i ts-node -g<br></code></pre></td></tr></table></figure><p>安装完毕后，在控制台输入命令<code>ts-node</code>加文件名即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ts-node 1.ts<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54151bf579ea40688ef039e8964d451f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=326&h=37&s=2526&e=png&b=1e1e1e" alt="image.png"></p><h5 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h5><p>还有一个是 VScode 中的一个插件</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ee9c12eae8425f9698d6617f8d6897~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=629&h=149&s=16670&e=png&b=1e1e1e" alt="image.png"></p><p>安装完这个插件我们直接在文件右上角点击运行即可</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0a12dbad54144cf947eecd5024c7e6b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=806&h=144&s=13264&e=png&b=1e1e1e" alt="image.png"></p><p>这样我们可以在输出窗口看到代码运行结果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab6912e2e2b94dfb9b71817610908034~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=601&h=118&s=14971&e=png&b=1e1e1e" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是《快速上手 TS（环境篇）》的全部内容了，如果你也对 TS 感兴趣，可以关注加三连，后期我会继续更新 TS 的相关知识。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只会Vue，快速上手React（React Router篇）</title>
    <link href="/2024/06/12/%E5%8F%AA%E4%BC%9AVue%EF%BC%8C%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BReact%EF%BC%88React%20Router%E7%AF%87%EF%BC%89/"/>
    <url>/2024/06/12/%E5%8F%AA%E4%BC%9AVue%EF%BC%8C%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BReact%EF%BC%88React%20Router%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上文中（<a href="https://juejin.cn/post/7377320107929829388">只会 Vue 的我，上班第一天就要我写 React+TS，是种什么样的体验？</a>），我们讲述了 React 从项目创建到如何实现自定义 Hooks ，比较偏基础，今天这篇文章将带大家学习 React Router。</p><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><p>如果你对 Vue Router 有了解的话，那么 React Router 肯定也不在话下，因为他们实在太相似了。我们知道前端路由是一个在单页应用中管理不同页面的导航，无需向服务器发送请求重新加载整个页面。即一个<code>path</code>对应一个<code>component</code>。所以 Router 在不管是 Vue 还是 React 亦或是 Angular 都是前端单页应用不可或缺的一部分。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>选择自己喜欢的包管理工具，这里需要注意安装的是 <code>react-router-dom</code>，后面有个 dom，跟 <code>react-dom</code> 一个道理，React Router 库分为多个包，其中<code>react-router-dom</code>是专门用于在浏览器中运行 React 的路由方案，适合 Web 开发。如果是移动端开发应该用<code>react-router-native</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install react-router-dom<br></code></pre></td></tr></table></figure><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>我们知道在 Vue 中有两种路由模式 History 跟 Hash 模式，React 同样。下表是我对这两者的简单对比，想必大家背八股的时候就已经熟记于心了。</p><table><thead><tr><th>模式</th><th>url</th><th>原理</th><th>后端支持</th></tr></thead><tbody><tr><td>history</td><td>url&#x2F;login</td><td>history 对象 + pushState 事件</td><td>需要</td></tr><tr><td>hash</td><td>url&#x2F;#&#x2F;login</td><td>hashChange 事件</td><td>不需要</td></tr></tbody></table><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>主要文件目录如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">src/<br>|<span class="hljs-comment">-- pages/</span><br>|   |<span class="hljs-comment">-- Login.jsx</span><br>|   |<span class="hljs-comment">-- About.jsx</span><br>|<span class="hljs-comment">-- router/</span><br>|   |<span class="hljs-comment">-- index.jsx</span><br>|<span class="hljs-comment">-- App.jsx</span><br>|<span class="hljs-comment">-- main.jsx</span><br></code></pre></td></tr></table></figure><p>我们一般都在<code>src</code>下新建目录<code>router</code>，然后在<code>index.jsx</code>中创建路由。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// router/index.jsx</span><br><span class="hljs-keyword">import</span> &#123; createBrowserRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Login&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Home&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>  <span class="hljs-comment">//创建 history 路由</span><br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>,<br>  &#125;,<br>]);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><code>react-router-dom</code>提供<code>createBrowserRouter</code>API 跟 Vue Router 提供的<code>createWebHistory</code>一样，允许我们创建 History 模式路由，Hash 模式 React 与 Vue 分别对应<code>createHashRouter</code>与<code>createWebHashHistory</code>，如果记混了可以自行查文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./App.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RouterProvider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RouterProvider</span> <span class="hljs-attr">router</span>=<span class="hljs-string">&#123;router&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">RouterProvider</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>创建好了就该使用了，在 Vue 中是直接在<code>main.js</code>中 App 根组件直接<code>use</code>掉，而在 React 中则有所不同， React Router 专门提供一个组件 <code>RouterProvider</code>，用于将路由配置传递给应用。它接受一个<code>router</code>prop，该 prop 是在刚刚创建的路由实例。</p><h3 id="导航跳转"><a href="#导航跳转" class="headerlink" title="导航跳转"></a>导航跳转</h3><h4 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h4><p>通过在模板中使用<code>&lt;Link /&gt;</code>组件，通过<code>to</code>属性指定要跳转的路径，跟 Vue 的<code>router-link</code>很类似，</p><p>🌰 现在我们要实现从登录页跳转至首页：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Login</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      Login</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>跳转至首页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>;<br></code></pre></td></tr></table></figure><p>我们先手动去到<code>/login</code>路径。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6feb8ec6848414e84874849c93a663c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=657&h=364&s=25231&e=gif&f=6&b=fefefe" alt="GIF 2024-6-12 10-42-24.gif" width="50%" /><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p>通过<code>useNavigate</code>钩子拿到导航方法，再通过调用命令式进行跳转。类似于 Vue 的<code>router.push()</code></p><p>🌰 一样的场景:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Login</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(&quot;/home&quot;)&#125;&gt;跳转<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>;<br></code></pre></td></tr></table></figure><p>通过事件驱动跳转，更加灵活。</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f6cfd379e4b4af28cedbeccd34e2914~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=620&h=402&s=15187&e=gif&f=4&b=fefefe" alt="GIF 2024-6-12 10-51-15.gif" width="50%" /><h3 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h3><p>React 提供了两个钩子允许我们进行导航传参。</p><h4 id="useSearchParams-传参"><a href="#useSearchParams-传参" class="headerlink" title="useSearchParams 传参"></a>useSearchParams 传参</h4><p>这里我们在 Login 页面进行跳转，并用<code>?</code>+<code>参数名</code>&#x3D;<code>参数</code>拼接，多个参数用<code>&amp;</code>拼接。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// login.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Login</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(&quot;/home?id=1&amp;name=yangyang&quot;)&#125;&gt;</span><br><span class="language-xml">        跳转传参</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>;<br></code></pre></td></tr></table></figure><p><code>useSearchParams</code>运行我们解构出一个对象，这个对象包含了所有通过<code>?</code>后的参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// home.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useSearchParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [params] = <span class="hljs-title function_">useSearchParams</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>id:&#123;params.get(&quot;id&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>name:&#123;params.get(&quot;name&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>我们打印 params 对象看看</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70e2dac1326f474990f1a4f45d64c293~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=931&h=692&s=98095&e=png&b=ffffff" alt="image.png" width="70%" /><p>它是一个<code>URLSearchParams</code> 对象，包含了一系列方法，我们可以使用<code>get</code>方法查询参数</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f193eca1b6147709683f5f511bfeab0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=975&h=431&s=59017&e=gif&f=10&b=fefefe" alt="GIF 2024-6-12 12-16-59.gif" width="50%" /><h4 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h4><p>这里我们还是在 Login 页面进行跳转，我们直接在路径后面继续接<code>/</code>+<code>参数</code>，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// login.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Login</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigate(&quot;/home/1/yangyang&quot;)&#125;&gt;跳转传参<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Login</span>;<br></code></pre></td></tr></table></figure><p>不仅如此，还需要修改<code>router</code>配置，将补全<code>path</code>用<code>:</code>+<code>参数名</code>，这样才能一一匹配。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home/:id/:name&#x27;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>最后，在 Home 页面接收参数，调用<code>useParams</code>得到一个对象，对象的每个属性就是我们传递的参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// home.jsx</span><br><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>id:&#123;params.id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>name:&#123;params.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cf0aba3e4f04eb2a44b825b255ab089~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=930&h=146&s=15495&e=png&b=ffffff" alt="image.png" width="70%" /><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/122da242b0d642c8a54c722b65722c58~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=819&h=431&s=22894&e=gif&f=3&b=fefefe" alt="GIF 2024-6-12 12-30-26.gif" width="50%" /><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>跟 Vue 一样，React 同样允许你在一个路由组件的<code>children</code>属性中配置子路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">index</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//默认二级路由</span><br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;board&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Board</span> /&gt;</span></span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;about&quot;</span>,<br>        <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>,<br>  &#125;,<br>]);<br></code></pre></td></tr></table></figure><p>二级路由的<code>path</code>如果不写<code>/</code>，会默认拼接在父级路由后面，配置<code>index:true</code>表示默认显示该路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// home.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;board&quot;</span>&gt;</span>面板<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><p>我们通过<code>Link</code>组件进行跳转，<code>Outlet</code>组件是二级路由的出口，你定义在哪，那么组件就会在哪显示，跟 Vue 的<code>router-view</code>类似。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dea9a7b1b404ce2883e79efc33d5304~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=719&h=437&s=38430&e=gif&f=16&b=fefefe" alt="GIF 2024-6-12 15-00-00.gif" width="50%" /><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>React 提供了<code>React.lazy</code>和<code>Suspense</code>组件来实现懒加载。<code>React.lazy</code>用于定义懒加载的组件，<code>Suspense</code>用于在组件加载时显示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createBrowserRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Suspense</span>, lazy &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/pages/Home&quot;</span>));<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Login</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/pages/Login&quot;</span>));<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Board</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/pages/Board&quot;</span>));<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">About</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/pages/About&quot;</span>));<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createBrowserRouter</span>([<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">element</span>: (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">加载中</span>&quot;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>    ),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">element</span>: (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">加载中</span>&quot;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>    ),<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">index</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;board&quot;</span>,<br>        <span class="hljs-attr">element</span>: (<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">加载中</span>&quot;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Board</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>        ),<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;about&quot;</span>,<br>        <span class="hljs-attr">element</span>: (<br>          <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">加载中</span>&quot;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br>        ),<br>      &#125;,<br>    ],<br>  &#125;,<br>]);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>通过套一层<code>lazy</code>就可以实现懒加载，<code>Suspense</code>提供 loading 内容。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不管是 Vue 还是 React ，前端路由的大致理念都是一样的，我们如果知道一个，很容易融汇贯通。还是那句话，多看文档，多敲代码，多实践！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh-hans.react.dev/learn">React-中文官网</a></li><li><a href="https://reactrouter.com/en/main/start/overview">React-Router-官网</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只会Vue的我，上班第一天就要我写React+TS，是种什么样的体验？</title>
    <link href="/2024/06/07/%E5%8F%AA%E4%BC%9A%E4%B8%8A%E7%8F%AD%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%B0%B1%E8%A6%81%E6%88%91%E5%86%99ReactTS%E6%98%AF%E7%A7%8D/"/>
    <url>/2024/06/07/%E5%8F%AA%E4%BC%9A%E4%B8%8A%E7%8F%AD%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%B0%B1%E8%A6%81%E6%88%91%E5%86%99ReactTS%E6%98%AF%E7%A7%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>只会 Vue 的我，上班第一天就要我写 React+TS，是种什么样的体验？</strong></p><p>入职第一天，坐公交来到指定报道处，拿号排队准备办理入职，拿装备去工位，认识 Leader 跟 Mentor，自己看文档装环境，屁股都没坐热，mentor 就问我技术栈是什么，我说 Vue，他又问 React 用过吗？我开始有不祥的预感，他反手就甩了个链接，叫我装完环境看一下，装完 vscode、node、git，我直接 pull 下来，看了一下目录 pnpm 咱也没用过啊，怎么全是 ts ，用的 Vite？这个我熟，直接安装依赖 run dev！</p><p>首先，这个项目就两个页面，我第一感觉是：怎么看着还不如我自己的项目好看 😢，但是当我打开代码，脑子直接缺氧，啥都看不懂。什么 type 什么 useMemo，闻所未闻。</p><p>赶紧开始自学 React + TS ……</p><p>晚上回到出租屋，突然有一种压力油然而生，我是不是太蠢了，Mentor 会不会看不起我 ……</p><p>看了一天视频，文章，我觉得我已经了解了 React ，至少不会看不懂了。</p><p>这篇文章就来总结一下我是如何快速上手的，分享一下我心得体会。如果你也跟我一样，下面我分享一些我的经验，希望能够对您有所帮助。</p><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>在 Vue 中，我们常用的脚手架是 Vue-CLI 以及尤大大推荐的 Vite ；在 React 中，我们通常使用 creat-react-app（CRA）创建项目，当然 Vite 同样也支持我们创建 React 项目。</p><h3 id="使用-CRA"><a href="#使用-CRA" class="headerlink" title="使用 CRA"></a>使用 CRA</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx create-react-app my-react-app<br></code></pre></td></tr></table></figure><h3 id="使用-Vite"><a href="#使用-Vite" class="headerlink" title="使用 Vite"></a>使用 Vite</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn create vite my-react-app --template react<br></code></pre></td></tr></table></figure><h3 id="其他创建方式"><a href="#其他创建方式" class="headerlink" title="其他创建方式"></a>其他创建方式</h3><p>参考 <a href="https://zh-hans.react.dev/learn/start-a-new-react-project">React | 启动一个新项目</a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>值得注意的是使用 cra 创建的项目中，JS 文件就是正常的<code>.js</code>后缀，而 Vite 创建项目的文件后缀是<code>.jsx</code>。</p><ul><li>Vite 基于 ESModule，它提供了对 JSX 的原生支持，使用<code>.jsx</code>作为源文件的后缀，以便我们直接编写 JSX 语法的 React 组件。</li><li>CRA 默认没有启用 JSX 预处理器，而是通过 Babel 和 Webpack 等工具来处理 JSX 语法。</li></ul><p>在写法上没有区别，不用考虑太多。</p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p>以下是 Vite 创建的项目目录结构：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af365556f65d4b75ba8b3656d79b105f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=195&h=338&s=14100&e=png&b=252526" alt="image.png"></p><p>其中入口文件是<code>main.jsx</code>，如果是 CRA 创建的项目则是<code>index.js</code>。</p><p>让我来看看它的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.jsx&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)).<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>这跟 Vue 的<code>main.js</code>的作用一样，将<code>App</code>根组件挂载到<code>id</code>为<code>root</code>的 DOM 元素上。</p><p><strong>我猜你可能会想，这里引入一个 React 又引入一个 ReactDom 干嘛，它们两个有什么区别？</strong></p><p>我们在<code>package.json</code>中也可以看到这两个依赖。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0df638d47a88442e8f77dabd6a41a1c0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=292&h=115&s=5549&e=png&b=1e1e1e" alt="image.png"></p><p>这是因为 React 作者将 React 源码拆成了两部分：</p><ul><li><p><code>React</code> 库提供构建用户界面的各种 API 和组件，比如创建 React 组件、处理组件生命周期、状态管理、事件处理等核心功能。</p></li><li><p><code>ReactDom</code> 库是 React 的 DOM 渲染器，只负责将 React 组件渲染到浏览器的 DOM 中，提供一些管理组件的更新、挂载和卸载等操作的 API。</p></li></ul><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>我们<code>return</code>出来的 JSX 模板，如果要换行的话，需要用<code>()</code>包裹一下，然后这个 JSX 表达式必须具有一个父元素，什么意思呢？就是下面这种写法会报错，JSX 表达式规定了最外层只能有一个父元素，这种情况下我们一般会在最外面套一个<code>div</code>或者空标签<code>&lt;&gt;&lt;/&gt;</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  &#123;<span class="hljs-comment">/*报错*/</span>&#125;<br>  &lt;div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &lt;/div&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><p>在 JSX 表达式允许我们只能在<code>&#123;&#125;</code>中写 JS 代码</p><h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>在 React 中有两种创建组件的方式，函数组件和类组件，类组件是。现在界内大部分都使用函数组件，函数组件相比于类组件，性能更好，React 18 虽然还支持类组件，但是更推荐使用函数组件。</p><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>函数组件是通过函数来定义的，函数的返回值是 JSX 模板，可以使用 <code>function</code> 关键字或箭头函数定义。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello Function Component<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d21eaa75fc34fcaac6638fb39e28de6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=454&h=157&s=8769&e=png&b=ffffff" alt="image.png"></p><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><p>函数组件通过 React 提供的 Hooks 函数（官方提供的一般以<code>use</code>开头的 API），比如我们通常使用<code>useState</code> 钩子来管理状态。</p><p><code>useState</code> 返回一个由两个值组成的数组：</p><ol><li>当前的<code>state</code>，初始值为传递给<code>useState</code>的参数。</li><li><code>set</code>  函数，它可以让你将<code>state</code>更新为不同的值并触发重新渲染。</li></ol><p>🙋‍ 举个例子 🌰，这里我们实现一个计数器，点击<code>count</code>自增<code>1</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>这里我们解构得到<code>count</code>跟它的<code>set</code>方法，我们每次点击触发<code>handleClick</code>函数，函数内部通过<code>set</code>方法修改状态并重新渲染。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91d93bd5149b47a095840c25ac501823~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=538&h=272&s=25427&e=gif&f=27&b=fefefe" alt="GIF 2024-6-6 17-23-01.gif" width="50%" /><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>React 16.8 之前，函数组件没有生命周期方法，但是从 React 16.8 开始，可以使用<code>useEffect</code> 这个 Hook 函数来执行类似生命周期的逻辑，用于替代 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code>这些方法。</p><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><p><code>useEffect</code>是 React 中用于执行副作用操作的 Hook，并且具有类似于生命周期方法的功能。</p><p><code>useEffect</code> 接受两个参数：副作用函数和依赖数组。</p><ol><li><strong>副作用函数</strong>：第一个参数是一个函数，用于执行副作用操作。</li><li><strong>依赖数组</strong>：第二个参数是一个数组，包含了副作用函数中所依赖的变量。如果省略这个参数，那么副作用函数会在每次组件重新渲染时都执行，可以充当<code>componentDidUpdate</code>这个生命周期；如果传入空数组 <code>[]</code>，则副作用函数只会在组件挂载时执行，相当于 <code>componentDidMount</code>；如果依赖数组中包含了某些变量，则只有这些变量发生变化时，副作用函数才会重新执行。如果我们在其中<code>return</code>一个函数，这个函数将会在组件卸载时除非，相当于<code>componentWillUnmount</code>。</li></ol><p>我总结了一下副作用函数执行时机与依赖项的关系如下：</p><table><thead><tr><th>依赖项</th><th>副作用函数执行时机</th></tr></thead><tbody><tr><td>没有依赖项</td><td>组件初始渲染 + 组件更新时执行</td></tr><tr><td>空数组依赖项</td><td>只在初次渲染时执行一次</td></tr><tr><td>添加特定依赖项</td><td>组件初始渲染 + 特定依赖项变化时执行</td></tr></tbody></table><p>举例说明 🌰：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//没有依赖项数组</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件更新&quot;</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击了 &#123;count&#125; 次<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>这里我们没有依赖项数组，刷新页面，组件初次渲染打印（打印两次是因为 React 源码自己执行了一次，应该是跟严格模式有关，这里我们不用深究），每次点击都会打印，可以充当<code>componentDidUpdate</code>生命周期。</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ed443e30b2e45629bbe20cf6064e775~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=696&h=468&s=52307&e=gif&f=21&b=fefefe" alt="GIF 2024-6-6 19-32-33.gif" width="50%" /><hr><p>依赖项为空数组呢？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//依赖项为空数组呢？</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件挂载&quot;</span>);<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击了 &#123;count&#125; 次<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>这里我们的依赖项数组为空，刷新页面，只在初次渲染时打印，点击不打印，可以充当<code>componentDidMount</code>生命周期。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/746f9e4ce2254e8cbe223791767e28c3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=696&h=468&s=68204&e=gif&f=28&b=fefefe" alt="GIF 2024-6-6 19-33-14.gif" width="50%" /><hr><p>依赖项数组不为空呢？</p><p>很容易联想到，如果数组里面有会发生改变的项，则会触发副作用函数，否则不会触发，这里就不演示了。</p><hr><p>来看最后一个，在副作用函数中<code>return</code>一个函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件更新&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件卸载&quot;</span>);<br>    &#125;;<br>  &#125;, [count]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击了 &#123;count&#125; 次<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>这里我们<code>return</code>一个函数打印卸载，表示组件卸载时会执行的操作。我们通常在这里进行组件卸载时的执行的操作，可以充当<code>componentWillUnmount</code>生命周期。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84e36073cdfe4f27b271fd53ded4a814~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=800&h=567&s=51838&e=gif&f=22&b=fefefe" alt="GIF 2024-6-6 19-51-19.gif" width="50%" /><p>一个很常见的例子 🌰：</p><p>我们通常在组件卸载时清除一些副作用函数，如定时器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;;<br>  &#125;, [count]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击了 &#123;count&#125; 次<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>如果我们不及时清除定时器，会导致资源浪费。</p><p>而且由于 <code>setCount</code> 是一个异步操作，它不会立即更新 <code>count</code> 的值，而是在下一次渲染时才会生效。因此，即使你设置了定时器每隔一秒钟执行一次，但 <code>count</code> 的值并不会每秒增加一次。相反，当定时器触发时，<code>count</code> 的值仍然是上一次渲染时的值。等一段时间后就会看到下面这个情况：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29923fc094d648879b1013c2c93e0f02~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=572&h=324&s=27666&e=gif&f=18&b=fefefe" alt="GIF 2024-6-6 20-06-38.gif" width="50%" /><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>😁<strong>可以不用但不能不学！</strong></p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>类组件通过继承 <code>React.Component</code> 或其子类来创建，类组件中有一个 <code>render()</code> 方法，用来返回 JSX 语法。</p><p>拿代码说事：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello Class Component<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>类组件的语法就是声明一个类，这个类继承<code>React.Component</code> 或者子类，<code>render()</code>方法返回 JSX 模板。然后将我们的 App 组件挂载到页面上就可以了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04452e5cd75c48dc9e2c1f9cd6f7d1a2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=458&h=167&s=9583&e=png&b=ffffff" alt="image.png"></p><h4 id="状态管理-1"><a href="#状态管理-1" class="headerlink" title="状态管理"></a>状态管理</h4><p>类组件拥有内部状态<code>state</code>，通过 <code>this.state</code> 来访问组件的状态，使用 <code>setState()</code>方法来更新状态，触发组件的重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>)&#123;<br><br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>this.setState(&#123;name:&quot;李四&quot;&#125;)&gt;&#123;this.state.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>我们绑定<code>onClick</code>事件，当点击时修改<code>name</code>的状态。</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f05edfaefa984490ba816a83af73136d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=467&h=332&s=17537&e=gif&f=5&b=fefefe" alt="GIF 2024-6-6 17-04-25.gif" width="30%" /><h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><p>类组件中可以使用生命周期方法，常见的有<code>componentDidMount</code>、<code>componentDidUpdate</code>、&#x3D;跟<code>componentWillUnmount</code>，它们分别对应 Vue3 中的 <code>onMounted</code>、<code>onUpdated</code> 跟 <code>onBeforeUnmount</code>。</p><p>这个网站可以很清楚看到 React 的生命周期，<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">React 生命周期</a>，这里就不过多赘述。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c876571316c4779bf0528aca4cef60a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1180&h=424&s=40943&e=png&b=fbf8f7" alt="image.png"></p><h3 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h3><p>在 Vue 中组件传值一般通过<code>props &amp; emit</code>、<code>provide &amp; inject</code>以及 Vue2 中的<code>EventBus</code>，或者我们可以直接使用状态管理工具<code>Vuex</code>或<code>Pinia</code>，React 其实大差不差，同样也有自己的状态管理工具。</p><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>父组件通过<code>props</code>传递任意的数字、字符串、布尔值、数组、对象、函数甚至是 JSX，子组件通过<code>props</code>参数接收。</p><p>🙋‍♀️🌰：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Son</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.cb()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;props.child&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Father</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Son</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;</span>&quot;<span class="hljs-attr">阳阳羊</span>&quot;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;20&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">cb</span>=<span class="hljs-string">&#123;function</span> <span class="hljs-attr">cb</span>() &#123;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">console.log</span>(<span class="hljs-attr">123</span>);</span></span><br><span class="hljs-tag"><span class="language-xml">      &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">child</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">span</span>&gt;</span>i am jsx<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#125;</span><br><span class="language-xml">    &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f7493c702384844b509095a3f5f3972~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=789&h=415&s=27428&e=png&b=fefefe" alt="image.png" width="50%" /><p>⚠️ 需要注意的是：子组件只能读取<code>props</code>中的数据，不能直接进行修改，父组件的数据只能由父组件修改，或者通过父组件传过来的函数进行修改。如果在子标签中嵌套元素，可以在子组件的<code>props.children</code>中获取。</p><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>子传父通过最原始的回调函数方式，父组件给子组件传一个函数，子组件调用这个函数然后传入实参，在函数内部用<code>set</code>方法修改父组件的状态。</p><p>🙋‍♀️🌰：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Son</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> props.cb(&quot;小羊&quot;)&#125;&gt;点击传递<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Father</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;阳阳羊&quot;</span>);<br>  <span class="hljs-keyword">let</span> <span class="hljs-title function_">cb</span> = (<span class="hljs-params">name</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setName</span>(name);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">cb</span>=<span class="hljs-string">&#123;cb&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">      &#123;name&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44f24ffe31fa4c8b84aada591cf2e534~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=549&h=284&s=14214&e=gif&f=3&b=fdfdfd" alt="GIF 2024-6-7 11-20-34.gif" width="50%" /><p>⚠️ 这里需要注意：<code>onClick</code>事件处理程序是一个函数，写成<code>onClick=&#123;() =&gt; props.cb(&#39;小羊&#39;)&#125;</code>时，实际上创建了一个匿名函数，当点击按钮时会调用这个函数，然后调用<code>props.cb(&#39;小羊&#39;)</code>，如果直接写成<code>onClick=&#123;props.cb(&#39;小羊&#39;)&#125;</code>，在渲染时就会立即调用<code>props.cb(&#39;小羊&#39;)</code>，而不是在点击时调用。</p><h4 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h4><p>兄弟组件通信贯用手段就是<strong>状态提升</strong>，说白话就是将数据都交给父组件，然后父组件作为中间商派发给大家。</p><p>🙋‍♀️🌰：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Son1</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      子组件1-</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> props.cb(&quot;小羊&quot;)&#125;&gt;传给子组件2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Son2</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>子组件2-&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Father</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;Son2&quot;</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">cb</span> = (<span class="hljs-params">newName</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setName</span>(newName);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Son1</span> <span class="hljs-attr">cb</span>=<span class="hljs-string">&#123;cb&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Son2</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;name&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里子<code>组件1</code>通过触发父组件传递过来的函数，并传递参数，然后父组件接收到参数修改数据源，传递给<code>组件2</code>。这样就完成了兄弟组件通信。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eb12209347142b59eea4b418c9507dc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=547&h=273&s=24884&e=gif&f=6&b=fdfcfc" alt="GIF 2024-6-7 11-16-47.gif" width="50%" /><h4 id="夸层组件通讯"><a href="#夸层组件通讯" class="headerlink" title="夸层组件通讯"></a>夸层组件通讯</h4><p>思路是将两个组件放在同一个上下文中就能实现数据共享。步骤如下：</p><ol><li>使用<code>createContext</code>方法创建一个上下文对象，将组件<code>Provider</code>，<code>Consumer</code>抛出</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Provider</span>, <span class="hljs-title class_">Consumer</span> &#125; = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">Provider</span>, <span class="hljs-title class_">Consumer</span> &#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>在顶层组件(App)中通过<code>Provider</code>组件提供数据</p></li><li><p>在底层组件(B)中通过<code>Consumer</code>组件获取对应数据</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span>, <span class="hljs-title class_">Consumer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./provider&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ComponentB</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Consumer</span>&gt;</span></span><br><span class="language-xml">      &#123;(value) =&gt; (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>底层组件——&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Consumer</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> value = <span class="hljs-string">&quot;顶层组件的数据&quot;</span>;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>顶层组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ComponentB</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>效果如下：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c488273f449470fbfbdccb8e36b31d3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=813&h=369&s=31043&e=png&b=fefefe" alt="image.png" width="50%" /><h4 id="状态管理工具"><a href="#状态管理工具" class="headerlink" title="状态管理工具"></a>状态管理工具</h4><p>常见的 React 状态管理工具有 Redux、Mobx、Rcoil 等等，如果有感兴趣的同学，我可以单独出一篇文章详细聊聊。本篇就不展开聊了。</p><h2 id="自定义-Hooks"><a href="#自定义-Hooks" class="headerlink" title="自定义 Hooks"></a>自定义 Hooks</h2><p>除了 React 官方提供的一些 Hooks 之外，还允许我们自定义自己的 Hooks，我们需要遵循以下规则：</p><ol><li>声明以<code>use</code>开头的函数</li><li>在函数体内封装可复用的逻辑</li><li>把组件中使用到的状态<code>return</code>出去</li><li>在哪里用到就在里面执行解构</li></ol><p>🙋‍♀️🌰：</p><p>我们设计来设计一个开关 Hooks，作用是对值取反，从而控制元素的显示隐藏：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useToggle</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">toggle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setValue</span>(!value);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> [value, toggle];<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [value, toggle] = <span class="hljs-title function_">useToggle</span>();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;value ? &quot;开&quot; : &quot;关&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggle&#125;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p>这里我们借助<code>useState</code>进行封装，将需要用到的变量进行抛出，在需要使用的地方解构拿到，通过三目运算符进行显示隐藏。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c183f8bc55224444b6bb384239bd4c08~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=613&h=369&s=29609&e=gif&f=12&b=fefefe" alt="GIF 2024-6-7 12-07-46.gif" width="50%" /><h3 id="Hooks-使用规则"><a href="#Hooks-使用规则" class="headerlink" title="Hooks 使用规则"></a>Hooks 使用规则</h3><p>Hooks 并不是然后场景下都能用，像比如在类组件中是不能直接使用 Hooks 的，除非使用高阶函数进行包装，以及其他许多规则：</p><ul><li>不能在组件外部使用</li><li>不能在判断语句中使用</li></ul><p>详见 <a href="https://zh-hans.react.dev/reference/rules/rules-of-hooks">React 中文官网</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是那句话，不管是 Vue 跟 React 都有自己的优缺点，我们不能断言说哪个好哪个差，在我看来 Vue 更适合第一次接触前端框架的小白，它封装了许多 API，对新手很友好，上手即用；而 React 相对复杂，更考验开发者的思维，对于一些复杂需求能够自定义进行封装，更接近原生 JS 开发。大家按需求选择就好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh-hans.react.dev/learn">React-中文官网</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试官：从输入URL到页面渲染，有哪些地方可以优化</title>
    <link href="/2024/04/27/%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96/"/>
    <url>/2024/04/27/%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>春招在继续，面试不停息！最近也是被问到了标题上这个问题，好家伙，一个问题问到了 URL 到页面渲染的过程和性能优化，如果不熟悉这个过程的话，回答起来确实挺费劲，这篇文章就将带大家来捋一捋，争取回答的时候不卡壳 ~</p><h2 id="输入-URL-到页面渲染过程"><a href="#输入-URL-到页面渲染过程" class="headerlink" title="输入 URL 到页面渲染过程"></a>输入 URL 到页面渲染过程</h2><h3 id="1-URL-解析"><a href="#1-URL-解析" class="headerlink" title="1.URL 解析"></a>1.URL 解析</h3><p>首先浏览器会判断你输入的是一个合法的<code>URL</code>  还是一个待搜索的关键词，如果是关键词，则会将关键词发送给默认的搜索引擎，然后返回页面；如果是<code>URL</code>，则会对<code>URL</code>的结构进行解析。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56d345299ffd4a9da71e3bf11a6e3944~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=942&h=265&s=55934&e=png&b=fefefe" alt="image.png"></p><h3 id="2-DNS-解析"><a href="#2-DNS-解析" class="headerlink" title="2.DNS 解析"></a>2.DNS 解析</h3><p>当浏览器解析出域名，它会向 DNS 服务器发送请求，获取相应域名对应的 IP 地址。</p><ul><li>首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表</li><li>若没有命中，则继续搜索操作系统的 DNS 缓存</li><li>若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果</li><li>若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询<ul><li>首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器</li><li>本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址</li><li>本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址</li></ul></li><li>本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来</li><li>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来</li><li>至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起来</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fafd1dd33e6d4fe389872eb4ec215da0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1013&h=730&s=78701&e=png&b=ffffff" alt="image.png"></p><h3 id="3-TCP-三次握手建立连接"><a href="#3-TCP-三次握手建立连接" class="headerlink" title="3.TCP 三次握手建立连接"></a>3.TCP 三次握手建立连接</h3><p>浏览器向服务器发起 TCP 连接请求，与服务器建立连接。</p><ol><li><strong>客户端向服务器发送连接请求</strong>：客户端首先向服务器发送一个 SYN 报文段，指定客户端的初始序列号，并设置 SYN 标志位为 1，表示请求建立连接。</li><li><strong>服务器响应确认连接请求</strong>：服务器接收到客户端的 SYN 报文段后，会向客户端发送一个 ACK 报文段作为确认，同时也发送一个 SYN 报文段。服务器在 SYN 报文段中指定服务器的初始序列号，并设置 SYN 和 ACK 标志位为 1，表示确认客户端的连接请求，并请求建立连接。</li><li><strong>客户端确认连接</strong>：客户端收到服务器的 SYN 报文段后，会向服务器发送一个 ACK 报文段作为确认。客户端设置 ACK 标志位为 1，表示确认服务器的连接请求，建立连接。</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8355f9f227574d9ca85e5c76e9cfb872~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=864&h=439&s=265977&e=png&b=fdfdfd" alt="image.png"></p><h3 id="4-发起-HTTP-请求"><a href="#4-发起-HTTP-请求" class="headerlink" title="4.发起 HTTP 请求"></a>4.发起 HTTP 请求</h3><p>当建立 TCP 连接之后，浏览器就可以发送  HTTP 请求到目标服务器，请求的内容包括：</p><ul><li><strong>请求行：</strong> 请求方法、请求的 URL、HTTP 协议的版本</li><li><strong>请求头部：</strong> 包含了关于客户端、请求、所需资源等的信息（Host、User-Agent 等等）</li><li><strong>请求体</strong>（仅在向服务器发送数据时才有）：包含了要发送给服务器的数据，如表单数据、JSON 数据等。</li></ul><h3 id="5-服务器响应"><a href="#5-服务器响应" class="headerlink" title="5.服务器响应"></a>5.服务器响应</h3><p>服务器接收到请求后，返回相应的资源数据，响应的内容包括：</p><ul><li><strong>状态行：</strong> 包含了 HTTP 协议的版本、状态码和状态消息。</li><li><strong>响应头：</strong> 包含了关于响应、服务器、所返回资源等的信息（Content-Type、Content-Length 等等）。</li><li><strong>响应体：</strong> 包含服务器返回给客户端的实际数据，如 HTML 页面、图片等。</li></ul><h3 id="6-浏览器解析渲染页面"><a href="#6-浏览器解析渲染页面" class="headerlink" title="6.浏览器解析渲染页面"></a>6.浏览器解析渲染页面</h3><h4 id="1-构建-DOM-树"><a href="#1-构建-DOM-树" class="headerlink" title="1.构建 DOM 树"></a>1.构建 DOM 树</h4><ol><li><strong>词法分析</strong> ：<ul><li>浏览器接收到 HTML 字符串后，会将其分解成一系列的标记（tokens）。</li><li>标记包括开始标签、结束标签、属性、文本内容等。</li></ul></li><li><strong>解析标记</strong> ：<ul><li>浏览器根据词法分析得到的标记，开始解析这些标记并构建 DOM 节点。</li><li>当解析到开始标签时，浏览器创建对应的元素节点，并将其加入 DOM 树中。</li><li>当解析到属性时，浏览器将属性添加到对应的元素节点上。</li><li>当解析到文本内容时，浏览器创建文本节点，并将其加入到 DOM 树中。</li></ul></li><li><strong>构建 DOM 树</strong>：<ul><li>在解析过程中，浏览器会根据标记的嵌套关系构建出完整的 DOM 树结构。</li><li>根据 HTML 文档的层次结构，浏览器将创建的元素节点和文本节点按照其在文档中的位置进行组织，形成一棵树状结构。</li></ul></li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/608838c921b24d74a2bff2c3c2d8adaa~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=800&h=443&s=214016&e=png&b=fefdfd" alt="image.png"></p><h4 id="2-构建-CSSOM-树"><a href="#2-构建-CSSOM-树" class="headerlink" title="2.构建 CSSOM 树"></a>2.构建 CSSOM 树</h4><ol><li><strong>词法分析</strong> ：<ul><li>浏览器接收到 CSS 字符串后，会将其分解成一系列的标记（tokens）。</li><li>标记包括选择器、属性、属性值等。</li></ul></li><li><strong>解析样式表</strong> ：<ul><li>浏览器根据词法分析得到的标记，开始解析这些标记并构建 CSSOM 节点。</li><li>当解析到选择器时，浏览器创建对应的规则节点，并将其加入 CSSOM 树中。</li><li>当解析到属性和属性值时，浏览器将其添加到对应的规则节点上。</li></ul></li><li><strong>计算优先级</strong> ：<ul><li>在解析过程中，浏览器会确定样式的优先级。</li></ul></li><li><strong>处理样式继承</strong> ：<ul><li>浏览器会处理样式的继承关系，将父元素的样式属性应用到子元素上。</li></ul></li><li><strong>解析样式表引用</strong> ：<ul><li>如果样式表中包含了 <code>@import</code> 规则，浏览器会解析引入的外部样式表，并将其内容合并到当前的 CSSOM 树中。</li></ul></li><li><strong>合并样式表（Merging Stylesheets）</strong> ：<ul><li>如果页面中包含多个样式表，浏览器会将这些样式表合并成一个统一的 CSSOM 树。</li></ul></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/395b713f42e54922bb733d37f6a0f574~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=582&h=299&s=123760&e=png&b=fbfafa" alt="image.png"></p><h4 id="3-构建渲染树"><a href="#3-构建渲染树" class="headerlink" title="3.构建渲染树"></a>3.构建渲染树</h4><p>浏览器将 DOM 树和 CSSOM 树合并成渲染树（Render Tree）。</p><ol><li><strong>从 DOM 树和 CSSOM 树中选择可见元素</strong>：<ul><li>首先，浏览器需要从 DOM 树和 CSSOM 树中选择出在页面中可见的元素。</li><li>不可见的元素，如 <code>&lt;head&gt;</code>、<code>script</code> 标签内的内容等，不会包含在渲染树中。</li></ul></li><li><strong>匹配样式规则</strong>：<ul><li>对于渲染树中的每个可见元素，浏览器会根据其标签和属性等信息，匹配适用的 CSS 样式规则。</li></ul></li><li><strong>计算最终样式</strong>：<ul><li>当一个元素匹配到多个 CSS 样式规则时，浏览器会根据优先级和层叠规则计算出最终的样式值。</li></ul></li><li><strong>生成渲染树</strong>：<ul><li>当所有可见元素都被匹配样式并加入渲染树后，渲染树的构建过程就完成了。</li></ul></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8798bcc009a4c0e8d1b41b25b5a6886~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1726&h=840&s=332657&e=png&b=fdfdfd" alt="image.png"></p><h4 id="4-回流"><a href="#4-回流" class="headerlink" title="4.回流"></a>4.回流</h4><p>有了渲染树，再接着就要进入回流（Reflow），也称为重新布局（Layout），浏览器根据渲染树中每个节点的布局信息，计算各个节点在页面中的位置和大小。当页面中的元素尺寸、位置或可见性发生变化时，浏览器需要重新计算并更新页面的布局信息。</p><h4 id="5-重绘"><a href="#5-重绘" class="headerlink" title="5.重绘"></a>5.重绘</h4><p>回流一定伴随着重绘（Repaint），重绘是指浏览器根据元素的样式信息重新绘制页面的过程，而不涉及布局的改变。浏览器根据布局信息，将页面内容绘制到屏幕上。当元素的样式属性（如颜色、背景色、文本等）发生变化时，会触发重绘操作。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="1-DNS-解析优化"><a href="#1-DNS-解析优化" class="headerlink" title="1.DNS 解析优化"></a>1.DNS 解析优化</h3><ul><li>使用快速的 DNS 服务器，可以借助 CDN ，减少域名解析时间。</li><li>减少不必要的域名解析，合并资源到尽可能少的域名。</li></ul><h3 id="2-建立-TCP-连接优化"><a href="#2-建立-TCP-连接优化" class="headerlink" title="2.建立 TCP 连接优化"></a>2.建立 TCP 连接优化</h3><ul><li>使用 HTTP&#x2F;2 以上版本协议，充分利用多路复用功能，减少连接建立时间。</li><li>减少不必要的 TCP 连接，通过合并或内联资源来减少连接建立次数。</li></ul><h3 id="3-发起-HTTP-请求优化"><a href="#3-发起-HTTP-请求优化" class="headerlink" title="3.发起 HTTP 请求优化"></a>3.发起 HTTP 请求优化</h3><ul><li>减少 HTTP 请求次数，通过合并或内联资源来减少请求次数（比如图片资源可以考虑懒加载图片或使用精灵图）。</li><li>使用资源预加载和预解析来预先加载页面所需资源。<code>&lt;link rel=&quot;preload&quot;&gt;</code> 或 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code></li></ul><h3 id="4-服务器响应优化"><a href="#4-服务器响应优化" class="headerlink" title="4.服务器响应优化"></a>4.服务器响应优化</h3><ul><li>使用 CDN 加速资源传输，提高服务器响应速度。</li><li>启用服务器端缓存，缓存动态生成的内容或数据库查询结果，减少服务器压力和响应时间。</li></ul><h3 id="5-资源下载优化"><a href="#5-资源下载优化" class="headerlink" title="5.资源下载优化"></a>5.资源下载优化</h3><ul><li>减小资源文件大小，如优化图片（使用 WebP 格式）、压缩 JavaScript 和 CSS。</li><li>使用浏览器缓存（Cache-Control、Expires），减少对服务器的请求，尤其是静态资源。</li><li>使用异步加载 <code>&lt;script async&gt;</code> 和 <code>&lt;script defer&gt;</code></li></ul><h3 id="6-HTML-解析优化"><a href="#6-HTML-解析优化" class="headerlink" title="6.HTML 解析优化"></a>6.HTML 解析优化</h3><ul><li>编写语义化的 HTML，避免过多嵌套和冗余标签。</li><li>减小 HTML 文件大小，去除不必要的空格和注释。</li></ul><h3 id="7-CSS-解析优化"><a href="#7-CSS-解析优化" class="headerlink" title="7.CSS 解析优化"></a>7.CSS 解析优化</h3><ul><li>减少 CSS 文件大小，删除不必要的样式和选择器。</li><li>避免使用昂贵的 CSS 选择器（尽量给每一个标签给定类名，不要嵌套），优化样式表性能。</li></ul><h3 id="8-构建渲染树优化"><a href="#8-构建渲染树优化" class="headerlink" title="8.构建渲染树优化"></a>8.构建渲染树优化</h3><ul><li>减少不必要的 DOM 操作，优化 JS 执行性能。</li><li>避免使用 JS 动态修改样式，尽量使用 CSS 实现动画效果。</li></ul><h3 id="9-回流优化"><a href="#9-回流优化" class="headerlink" title="9.回流优化"></a>9.回流优化</h3><ul><li>使用新布局（Flexbox 或 Grid 布局），减少复杂的布局计算。</li><li>避免频繁修改样式属性，尽量使用批量修改或者使用类名切换的方式。</li></ul><h3 id="10-重绘优化"><a href="#10-重绘优化" class="headerlink" title="10.重绘优化"></a>10.重绘优化</h3><ul><li>使用 transform 和 opacity 属性来触发硬件加速，减少页面重绘次数。</li><li>避免在页面加载过程中阻塞渲染，尽快将页面内容呈现给用户。</li><li>如果需要操作 DOM，先让 DOM 脱离文档流，再修改，再带回文档流（或者使用 DocumentFragment），减少回流重绘。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6844904134307495943?searchId=20240426205357E60AB4CA7A393DAA106E#heading-26">「一道面试题」输入 URL 到渲染全面梳理中-页面渲染篇 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/6844903784229896199?searchId=20240426205107A43476DE1FB412A9CC53#heading-15">从 URL 输入到页面展现到底发生什么？ - 掘金 (juejin.cn)</a></li><li><a href="https://vue3js.cn/interview/http/after_url.html#%E4%BA%8C%E3%80%81%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90">面试官：说说地址栏输入 URL 敲下回车后发生了什么? | web 前端面试 - 面试官系列 (vue3js.cn)</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文搞懂 Webpack 和 Vite</title>
    <link href="/2024/04/25/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Webpack%E5%92%8CVite/"/>
    <url>/2024/04/25/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82Webpack%E5%92%8CVite/</url>
    
    <content type="html"><![CDATA[<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b07f91e750c4751ab4e412a06fb8c9f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=771&h=318&s=214903&e=png&b=fec644" alt="image.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Webpack 和 Vite 都是前端工程化工具。Webpack 作为老大哥，在前端社区也算站稳了脚跟，它提供了许多配置和插件，让开发者定制化构建项目。随着 Vite 的出现，Webpack 在启动时间和热更新方面的缺陷就慢慢暴露，Vite 逐渐开始替代 Webpack。</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><strong>1. 初始化项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn init -y<br></code></pre></td></tr></table></figure><p><strong>2. 安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add webpack webpack-cli -D<br></code></pre></td></tr></table></figure><p><strong>3. 在项目中创建 src 目录，编写代码</strong></p><p><strong>4. 打包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn webpack<br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Webpack 提供配置项和插件系统，允许我们在<code>webpack.config.js</code>文件中进行各种配置，从而帮助我们定制化构建项目。</p><h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><p>设置打包的模式，<code>production</code>为生产模式，<code>development</code>为开发模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;production&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><p>指定打包入口文件，默认为<code>./src/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/a.js&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>指定打包入口文件为<code>./src/a.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>: [<span class="hljs-string">&quot;./src/a.js&quot;</span>, <span class="hljs-string">&quot;./src/b.js&quot;</span>];<br></code></pre></td></tr></table></figure><p>使用数组可以设置多个入口文件，但是最后始终打包成一个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">entry</span>:&#123;<br>    <span class="hljs-attr">aa</span>:<span class="hljs-string">&#x27;./src/a.js&#x27;</span>,<br>    <span class="hljs-attr">bb</span>:<span class="hljs-string">&#x27;./src/b.js&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>对象形式也可设置多个入口文件，但是会打包成多个文件。Webpack 会将<code>value</code>文件打包成<code>key.js</code>文件，比如上述例子会将<code>&#39;./src/a.js&#39;</code>文件打包成<code>aa.js</code>文件、<code>&#39;./src/b.js&#39;</code>件打包成<code>bb.js</code>文件。</p><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>对打包后的文件进行配置，默认打包文件地址为<code>./dist/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>, <span class="hljs-comment">//打包后的文件名</span><br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//每次打包前清除上次打包的文件</span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;hello&quot;</span>), <span class="hljs-comment">//打包后的文件存放路径，必须要绝对路径</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>filename</code>中 Webpack 提供模版字符串的形式，可以自动生成唯一文件名：</p><ul><li><code>filename: &quot;[name].js&quot;</code> 打包多个文件时匹配对应的文件名,<code>[name]</code>与 entry 中的 key 对应。</li><li><code>filename: &quot;[hash].js&quot;</code> 会随机生成哈希值，一般用于区分版本。</li></ul><p>等等，详情参考官方文档 <a href="https://webpack.docschina.org/configuration/output/#template-strings">Output | template-strings</a></p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>Webpack 默认情况下，只会处理 js 文件，如果我们希望它可以处理其他类型的文件，则要为其引入 loader</p><p>以 css 为例，如果我们不进行任何操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//直接将css引入到js中</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./style/index.css&quot;</span>;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&quot;beforeend&quot;</span>, <span class="hljs-string">&quot;&lt;h1&gt;hello webpack&lt;/h1&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p>直接打包</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b79dfc906c304c919c48740c96fca4f0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=745&h=222&s=21476&e=png&b=1e1e1e" alt="image.png"></p><p>报错了，Webpack 说读不懂。</p><p>我们需要安装解析 css 文件的 loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add css-loader<br></code></pre></td></tr></table></figure><p>配置 loader，<code>rules</code>是一个数组，允许我们配置多个 loader，<code>test</code>属性是一个正则表达式，用于匹配对应 loader 的文件，<code>use</code>属性则是匹配对应 loader。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">//匹配文件</span><br>      <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;css-loader&quot;</span>,<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完毕，成功打包，但是页面上并没有样式，但是打包文件中是有样式的啊，为什么就没有显示到页面上呢？</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f78ba8c1067840159bffdb596152f8f4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=481&h=61&s=4104&e=png&b=1f1f1f" alt="image.png"></p><p>因为 loader 遵循职责单一原则，一个 loader 只做一件事情，如果你想在打包的文件中使用上 css，光有解析 loader 还不够，还需要安装另一个 loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add style-loader<br></code></pre></td></tr></table></figure><p>然后配置<code>style-loader</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-comment">//匹配文件</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>], <span class="hljs-comment">//从后往前执行,有顺序要求</span><br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里需要注意 ⚠️，如果我们配置多个 loader，则用数组存放，存放的顺序遵循<strong>从右往左</strong>，先执行的放右边，否则会报错。这里先编译 css 再使用，所以顺序为<code>&#39;style-loader&#39;,&#39;css-loader&#39;</code>。</p><h5 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h5><p>在编写 js 代码时，经常需要使用一些 js 中的新特性，而新特性在旧的浏览器中兼容性并不好。但是我们现在希望能够使用新的特性，我们可以采用折中的方案。依然使用新特性编写代码，但是代码编写完成时我们通过一些工具将新代码转换为旧代码。</p><p><a href="https://babel.nodejs.cn/">Babel</a> 就是这样一个工具，可以将新的 js 语法转换为旧的 js，以提高代码的兼容性。我们如果希望在 Webpack 支持 babel，则需要向 Webpack 中引入 babel-loader。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">onclick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello webpack&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里我们使用一个箭头函数，在不做任何处理的情况下进行打包</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a10db0edca94d77872bd99660885a22~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=582&h=61&s=6024&e=png&b=1f1f1f" alt="image.png"></p><p>打包后发现还是箭头函数。</p><p>于是我们安装<code>babel-loader</code>以及一些配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add -D babel-loader @babel/core @babel/preset-env<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.m?js$/</span>, <span class="hljs-comment">//以.mjs或js后缀的文件</span><br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/(node_modules|bower_components)/</span>, <span class="hljs-comment">//排除node_modules中的文件</span><br>      <span class="hljs-attr">use</span>: &#123;<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>], <span class="hljs-comment">//根据目标浏览器或运行时环境自动选择合适的转换规则</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><p>再试试呢：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b1a28dfbd914275971397476bf870c9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=608&h=60&s=6398&e=png&b=1f1f1f" alt="image.png"></p><p>成功将箭头函数打包成普通函数。</p><h6 id="配置兼容性"><a href="#配置兼容性" class="headerlink" title="配置兼容性"></a>配置兼容性</h6><p>我们可以在<code>package.json</code>文件中配置需要兼容的浏览器，详情见 <a href="https://github.com/browserslist/browserslist">github</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;defaults&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//默认</span><br>  <span class="hljs-string">&quot;ie &lt;= 11&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//ie版本低于11</span><br>  <span class="hljs-string">&quot;last 2 versions&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//至少存在两个版本</span><br>  <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//市场占有率大于1%</span><br>  <span class="hljs-string">&quot;iOS 7&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>plugin 的作用是 Webpack 扩展功能。loader 可以理解为转换器，用于处理模块之间的转换，plugin 则用于执行更广泛的任务，它可以访问 Webpack 的生命周期，在合适的时机执行插件的功能。</p><p>举个例子 🌰：</p><p>我想在打包目录生成 html 文件，用于访问打包的 js 文件，我们可以手动创建，但是我们不建议直接操作<code>dist</code>打包目录，我们可以通过 plugin 自动生成该文件。</p><p>安装自动生成 html 文件的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add -D html-webpack-plugin<br></code></pre></td></tr></table></figure><p>配置 plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-comment">//自动创建html文件</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLPlugin</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Hello Webpack&quot;</span>, <span class="hljs-comment">//配置html文件的标题</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./src/index.html&quot;</span>, <span class="hljs-comment">//以哪个文件为模版创建</span><br>  &#125;),<br>];<br></code></pre></td></tr></table></figure><p>当我们再次打包，就会自动生成包含对应配置的 html 文件。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87bfecda699449a5979753c9c4d6d3bd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=200&h=90&s=3005&e=png&b=252526" alt="image.png"></p><h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><p><code>webpack-cli</code>提供了许多命令帮助我们打包运行项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn webpack<br></code></pre></td></tr></table></figure><p>每次修改源码都需要重新打包，太麻烦了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn webpack --watch<br></code></pre></td></tr></table></figure><p>加上<code>--watch</code>后每次修改源码都会被监听到，并且重新打包。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6329df87bb8e4f91a2b344f2d239a561~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=544&h=73&s=11212&e=png&b=1e1e1e" alt="image.png"></p><p>但是这个命令不能完美还原项目上线的场景，因为它访问的是文件目录，而不是服务器。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/041b8d5d3b9a4785a96f6810536c74fa~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=704&h=176&s=11852&e=png&b=fefefe" alt="image.png"></p><p>为此，我们可以安装一个 Webpack 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add -D webpack-dev-server<br></code></pre></td></tr></table></figure><p>当我们运行以下命令，它能够将项目部署到一个开发服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn webpack serve --open<br></code></pre></td></tr></table></figure><p>当我们访问本地 8080 端口，就能够看到我们的项目。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a39e13a757994cbf8ebd21a9be5870a5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=421&h=149&s=8115&e=png&b=fdfdfd" alt="image.png"></p><p>⚠️ 需要注意的是：这个服务它只会将我们的项目打包并运行在这个服务器，但是本地看不到这个<code>dist</code>的，所以当我们项目调试完毕，还需要自己手动打包一下。</p><h3 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h3><p>我们一般会将常用的命令配置一下，使用起来更方便：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --watch&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack serve --open&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p>Webpack 是先打包再运行，而 Vite 开发时并不打包，而是直接采用 ES Module 运行项目，部署的时候再打包，开箱即用。</p><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><strong>1. 初始化项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn init -y<br></code></pre></td></tr></table></figure><p><strong>2. 安装 Vite</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add -D vite<br></code></pre></td></tr></table></figure><p><strong>3. Vite 的源码目录就是项目根目录，创建<code>index.html</code>文件，以 ES Module 的方式引入 js 文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4. 在本地<code>5173</code>端口启动一个开发服务器，进行项目调试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn vite<br></code></pre></td></tr></table></figure><p><strong>5. 打包代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn vite build<br></code></pre></td></tr></table></figure><h3 id="快速创建项目"><a href="#快速创建项目" class="headerlink" title="快速创建项目"></a>快速创建项目</h3><p>参考 <a href="https://vitejs.cn/vite3-cn/guide/#scaffolding-your-first-vite-project">开始 | Vite 官方中文文档 (vitejs.cn)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn create vite<br></code></pre></td></tr></table></figure><p>然后按照提示操作一步步配置即可！</p><p>如果你选的是原生 JS，你就会得到一个这样的完整项目路径：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc878253b972445ca40eee285985308a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=235&h=280&s=11761&e=png&b=252526" alt="image.png"></p><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>首先在根目录下创建<code>vite.config.js</code>文件，⚠️ 注意这里的抛出语法与 Webpack 不同，Webpack 使用 CommonJS 语法，而 Vite 使用的是 ES Module 语法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//vite</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> = &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 Vite 还提供了一个可选配置项<code>defineConfig</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<span class="hljs-comment">//需不需要提示</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>它的作用是在我们写配置的时候会不会有提示。</p><p>加了：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8b3281b4ea0411ab6db84977ed8da49~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=506&h=174&s=14896&e=png&b=1f1f1f" alt="image.png"></p><p>没加：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a649bc2692564ce4a4822396eb14e8f6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=398&h=164&s=8082&e=png&b=1e1e1e" alt="image.png"></p><p>对比不难发现区别。</p><h4 id="Vite-需要配置-loader-吗？"><a href="#Vite-需要配置-loader-吗？" class="headerlink" title="Vite 需要配置 loader 吗？"></a>Vite 需要配置 loader 吗？</h4><p>试验一下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&quot;beforeend&quot;</span>, <span class="hljs-string">&quot;&lt;h2&gt;hello vite&lt;/h2&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p>这里我们在 js 中引入 css 样式，然后<code>yarn vite</code> 运行一下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d4e62e6bcfd4ac3b2c04c7da18e9198~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=461&h=171&s=7138&e=png&b=fefefe" alt="image.png"></p><p>结果显而易见，vite 不用配置 loader 就能编译和使用 css。</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>Vite 可以使用插件进行扩展，这得益于 Rollup 优秀的插件接口设计和一部分 Vite 独有的额外选项。详情参见 <a href="https://vitejs.cn/vite3-cn/guide/using-plugins.html">使用插件 | Vite 官方中文文档 (vitejs.cn)</a></p><p>举个例子 🌰：</p><p>要想为传统浏览器提供支持，类似于 Babel，需要引入官方插件<code>@vitejs/plugin-legacy</code>和压缩工具<code>terser</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add -D @vitejs/plugin-legacy terser<br></code></pre></td></tr></table></figure><p>然后配置插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>; <span class="hljs-comment">//需不需要提示</span><br><span class="hljs-keyword">import</span> legacy <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-legacy&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">legacy</span>(&#123;<br>      <span class="hljs-attr">targets</span>: [<span class="hljs-string">&quot;ie 11&quot;</span>], <span class="hljs-comment">//兼容IE 11</span><br>    &#125;),<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们来个箭头函数检验一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello vite&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>yarn vite build</code>一下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9c237136b5f417f8d75a4a7a83d562c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=349&h=165&s=10660&e=png&b=262627" alt="image.png"></p><p>我们可以看到 Vite 给我们生产了三个 js 文件和一个 html 文件，来分析一下：</p><p><code>index.js</code>：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff6d50da1f7c431ca55d249120ebc223~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=468&h=52&s=4671&e=png&b=1e1e1e" alt="image.png"></p><p>这个文件中的箭头函数并没有转为普通函数；</p><p><code>index-legacy.js</code>：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3153971c059148c0852a3917640edde0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=522&h=48&s=5193&e=png&b=1f1f1f" alt="image.png"></p><p>这个文件中的箭头函数成功转成了普通函数；</p><p><code>polyfills-legacy.js</code>：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f289559ffa1c4faca4339661c488cbc8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=706&h=123&s=21850&e=png&b=1e1e1e" alt="image.png"></p><p>这个文件的作用是用于向下兼容旧版浏览器，确保旧版浏览器能够读懂新特性。</p><p><code>index.html</code>：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51f54a5761f14494a5c12830c47d7028~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1044&h=299&s=49070&e=png&b=1e1e1e" alt="image.png"></p><p>这个文件的意图就很明显了，如果浏览器支持 ESModule（即现代浏览器），则一般可以支持新语法，因此就可以直接引入新语法文件；但是如果浏览器不支持 ESModule，则可能是旧版本的浏览器，它们可能不支持新特性，这时候就需要引入兼容性代码来填补这些功能的缺失。在这种情况下，一般会引入 polyfills，以及旧版文件，来确保应用在旧版浏览器中的正常运行。</p><p>vite 不像 webpack 只生成一个降级之后的文件，而是两个都生成，再根据浏览器的兼容性，动态地确定加载哪个版本的代码。对于现代浏览器来说，直接加载现代版本的代码可以获得更快的加载速度和更好的性能。而对于不支持 ES Module 的旧版浏览器，则加载降级版本的代码以确保兼容性。</p><p>以上是对兼容性插件<code>legacy</code>的分析，更多插件可参见 <a href="https://vitejs.cn/vite3-cn/plugins/">插件 | Vite 官方中文文档 (vitejs.cn)</a></p><h3 id="快捷命令-1"><a href="#快捷命令-1" class="headerlink" title="快捷命令"></a>快捷命令</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite build&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;preview&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite preview&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h2 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h2><ol><li><strong>构建方式：</strong> Webpack 通过构建整个项目的依赖图，将所有资源打包成一个或多个 bundle 文件，每次重启都需要打包。Vite 采用了即时编译的方式，在开发模式下通过浏览器原生支持的 ES Module 特性进行加载，不需要打包。</li><li><strong>开发体验：</strong> Webpack 需要较多的配置，对复杂的项目来说，需要花费时间和精力来配置各种 loader 和 plugin。Vite 开箱即用，不需要复杂的配置即可快速启动项目，支持各种插件以满足特定需求。</li><li><strong>热更新：</strong> Webpack 的热更新通常需要借助 webpack-dev-server 等插件，在一些情况下配置起来比较复杂。Vite 内置了基于浏览器原生模块热更新的开发服务器，无需额外配置即可实现快速的热更新。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webpack</tag>
      
      <tag>Vite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文搞懂 HTTP 缓存</title>
    <link href="/2024/04/22/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%20HTTP%20%E7%BC%93%E5%AD%98/"/>
    <url>/2024/04/22/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%20HTTP%20%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>HTTP 缓存可谓前端工程师必备技能之一，在最近的面试中，也经常被问到，那么为什么要有 HTTP 缓存，以及它是如何工作的，下面咱们展开来好好聊聊。</p></blockquote><p>还不知道什么是 HTTP？可以跳转到我的前一篇文章—— <a href="https://juejin.cn/post/7351700046486863881">捋一下 HTTP 发展史 - 掘金 (juejin.cn)</a></p><h2 id="为什么要有-HTTP-缓存"><a href="#为什么要有-HTTP-缓存" class="headerlink" title="为什么要有 HTTP 缓存"></a>为什么要有 HTTP 缓存</h2><p>缓存缓存，顾名思义就是将一些资源保存在本地，后续请求时就可以直接在本地读取，而不用请求服务器。使用 HTTP 缓存是提高性能优化和提升用户体验的关键技术，它主要体现在几个方面：</p><blockquote><ol><li><strong>减少延迟</strong>：当资源被缓存后，用户可以直接从浏览器缓存或更近的网络节点（如 CDN）获取数据，而不必每次都请求原始服务器。网络延迟和数据传输时间都大大缩短了。</li><li><strong>减轻服务器负担</strong>：通过缓存常用资源（如 Logo），服务器不必每次都处理相同的请求。</li><li><strong>节约带宽</strong>：缓存可以显著减少需要通过网络传输的数据量，降低用户和供应商的流量成本。</li><li><strong>改善用户体验</strong>：缓存使得网页、图片等内容的加载更快，从而直接提高了用户的浏览体验。</li><li><strong>离线浏览</strong>：HTTP 缓存在一些场景可以让用户在没有网络连接的情况下，仍然能够访问先前加载过的内容。（如网易云音乐可以离线听之前缓存过的歌）</li><li><strong>负载均衡</strong>：通过在多个地理位置缓存内容，避免所有请求都集中在一个服务器上。可以有效处理高流量和大规模分布的用户。</li></ol></blockquote><p>总之，HTTP 缓存是前端开发者必备一项至关重要的技能，话不多说，开始介绍！</p><h2 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h2><p>HTTP 缓存是一种客户端缓存，当浏览器向服务器发送资源请求时，服务器可以在响应头中查看是否包含缓存相关的信息。浏览器依据这些信息缓存响应资源，再次请求时如果命中缓存则直接读取本地缓存资源，而不再发请求。HTTP 缓存分为<strong>强缓存</strong>和<strong>协商缓存</strong>。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>强缓存直接决定了浏览器是否需要向服务器发起请求，只需要设置缓存的过期时间。如果强缓存有效，浏览器将直接从本地缓存中读取资源，不会与服务器进行任何交互。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p><code>Cache-Control</code>是通用消息头字段，被用于在 HTTP 请求和响应中，通过指定指令来实现缓存机制，通过设置<code>max-age=xxx</code>来指定资源在缓存中可以存活的最大时间（单位是秒）。</p><p>举个栗子 🌰：</p><p>这里我们缓存一个图片资源，过期时间为 86400 秒即一天</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>  <span class="hljs-string">&quot;Content-Type&quot;</span>: mime.<span class="hljs-title function_">lookup</span>(ext),<br>  <span class="hljs-string">&quot;cache-control&quot;</span>: <span class="hljs-string">&quot;max-age=86400&quot;</span>, <span class="hljs-comment">//缓存一天</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>当我们第一次请求时，会正常发请求拿到资源</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba6bdbf76f7f4142adf814f086a56034~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=998&h=281&s=22453&e=png&b=fdfdfd" alt="image.png"></p><p>但当我们刷新页面再次发请求时发现，此时的履行者变为<code>memory cache</code>，大小和时间都变为 0，说明这次的资源并不是从服务器请求回来的，而是来自本地内存缓存。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760581758f064a0ca785bd599eb88c2b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=981&h=291&s=34416&e=png&b=fdfdfd" alt="image.png"></p><p>并且我们可以在响应头中查看<code>Cache-Control</code>字段和我们设置的过期时间。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ec48160b7fc4e3fb31dee812ba8e9d3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=569&h=401&s=28906&e=png&b=fefdfd" alt="image.png"></p><p>当然<code>Cache-Control</code>不止只允许我们设置<code>max-age</code>过期时间，还有其他字段，详情可参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E7%BC%93%E5%AD%98%E8%AF%B7%E6%B1%82%E6%8C%87%E4%BB%A4">Cache-Control - HTTP | MDN (mozilla.org)</a></p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p><code>Expires</code>响应头是一个具体的日期&#x2F;时间，告诉浏览器在这个时间点之前不需要重新请求资源。</p><blockquote><p>⚠️ 注意：如果响应中有指令为  <code>max-age</code>  或  <code>s-maxage</code>  的<code>Cache-Control</code>标头，则  <code>Expires</code>  标头会被忽略。</p></blockquote><p>举个栗子 🌰：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>  <span class="hljs-string">&quot;Content-Type&quot;</span>: mime.<span class="hljs-title function_">lookup</span>(ext),<br>  <span class="hljs-title class_">Expires</span>: <span class="hljs-string">&quot;Mon Apr 22 2024 21:03:31 GMT+0800&quot;</span>, <span class="hljs-comment">//过期时间戳自己选择</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38882c45d14349289b70dfb5937a5fc1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=707&h=405&s=30659&e=png&b=fefefe" alt="image.png"></p><p>与<code>Cache-Control</code>用法相似，就不过多赘述。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>当强缓存过期或无效时，浏览器就会与服务器进行交互，通过发送带有特定验证头的请求来检查资源是否被修改。如果服务器确认缓存资源仍然是最新的，则返回 304 状态码，浏览器会从本地缓存加载资源。如果资源不是最新的，则返回 200 状态码和新的资源数据。</p><h4 id="Last-Modified-和-If-Modified-Since"><a href="#Last-Modified-和-If-Modified-Since" class="headerlink" title="Last-Modified 和 If-Modified-Since"></a>Last-Modified 和 If-Modified-Since</h4><p>服务器在响应中提供<code>Last-Modified</code>日期，表明资源最后修改时间。浏览器在后续请求中使用<code>If-Modified-Since</code>头包含这个日期，如果服务器上的资源自那以后未修改，就会返回 304 状态码。</p><p>举个栗子 🌰：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> stats = fs.<span class="hljs-title function_">statSync</span>(filePath); <span class="hljs-comment">//获取文件文件修改时的时间戳</span><br><span class="hljs-keyword">const</span> timeStamp = req.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;if-modified-since&quot;</span>]; <span class="hljs-comment">//获取请求头字段</span><br><span class="hljs-keyword">let</span> status = <span class="hljs-number">200</span>; <span class="hljs-comment">//资源修改</span><br><span class="hljs-keyword">if</span> (timeStamp &amp;&amp; <span class="hljs-title class_">Number</span>(timeStamp) === stats.<span class="hljs-property">mtimeMs</span>) &#123;<br>  <span class="hljs-comment">//时间戳不变</span><br>  status = <span class="hljs-number">304</span>; <span class="hljs-comment">//资源未修改</span><br>&#125;<br><br>res.<span class="hljs-title function_">writeHead</span>(status, &#123;<br>  <span class="hljs-string">&quot;Content-Type&quot;</span>: mime.<span class="hljs-title function_">lookup</span>(ext),<br>  <span class="hljs-string">&quot;last-modified&quot;</span>: stats.<span class="hljs-property">mtimeMs</span>, <span class="hljs-comment">//时间戳</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>通过对比这次请求头的<code>if-modified-since</code>和响应头的<code>last-modified</code>判断资源是否修改</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/494eff6380b14035b2c2b10872038d88~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=720&h=664&s=50192&e=png&b=fefefe" alt="image.png" width="70%" /><p>当资源未修改，返回 304 状态码，从缓存中拿资源。</p><p>现在我们试试手动修改资源，再次刷新页面：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c995a290776440df8a579378f5f45268~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=712&h=667&s=50667&e=png&b=fefefe" alt="image.png" width="70%" /><p>资源修改，两次时间戳不同，返回 200 状态码，和新的资源。</p><h4 id="ETag-和-If-None-Match"><a href="#ETag-和-If-None-Match" class="headerlink" title="ETag 和 If-None-Match"></a>ETag 和 If-None-Match</h4><p><code>ETag</code>是资源的唯一标识符，反映资源的内容状态。浏览器存储这个标识并在后续请求中通过<code>If-None-Match</code>头发送它。如果<code>ETag</code>未改变，服务器返回 304 状态码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (req.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;if-none-match&quot;</span>] === etag) &#123;<br>  res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">304</span>, &#123;<br>    <span class="hljs-comment">// 未修改，返回304</span><br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: mime.<span class="hljs-title function_">lookup</span>(ext),<br>    <span class="hljs-title class_">ETag</span>: etag,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">end</span>();<br>&#125;<br><br>res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>  <span class="hljs-comment">//修改，返回200</span><br>  <span class="hljs-string">&quot;Content-Type&quot;</span>: mime.<span class="hljs-title function_">lookup</span>(ext),<br>  <span class="hljs-title class_">ETag</span>: etag,<br>&#125;);<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">end</span>(content);<br></code></pre></td></tr></table></figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76f551ed1d2c4a0b8e8bec1f166665ff~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=714&h=644&s=49796&e=png&b=fefefe" alt="image.png" width="70%" /><p>两种协商缓存的区别是一个比较时间戳一个比较哈希值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>强缓存通过设置过期时间来控制资源的缓存；而协商缓存则是通过与服务器验证资源的状态来决定是否使用缓存。协商缓存可以避免强缓存的不足之处，比如当资源在有效期内但发生了变化时，协商缓存可以保证客户端获取到最新的资源。</p><p>最后配一张个人觉得总结十分到位的图（图片地址在文末）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c58c2a8b007459ebeecb8fd3950a09f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=841&h=534&s=201743&e=png&b=eeeeee" alt="image.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">HTTP 缓存 - HTTP | MDN (mozilla.org)</a></li><li><a href="https://juejin.cn/post/6844904153043435533?searchId=20240422101749A6A836A76242BD0217C2">图解 HTTP 缓存 - 掘金 (juejin.cn)</a></li><li><a href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/10/171fea0fec0b4668~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp">图片地址</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>已将学习代码上传至 <a href="https://github.com/YangyangU/CodeSpace">github</a>，欢迎大家学习指正！</p>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试官 ：[] == ! [] 为什么返回 true ？</title>
    <link href="/2023/12/04/%E9%9D%A2%E8%AF%95%E5%AE%98%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%94%E5%9B%9Etrue/"/>
    <url>/2023/12/04/%E9%9D%A2%E8%AF%95%E5%AE%98%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%94%E5%9B%9Etrue/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文的讲解是建立在类型转换的基础上，如果对类型转换机制不了解的同学可以先阅读一下我的上一篇文章（<a href="https://juejin.cn/post/7307857937699405862">看了一天的官方文档，终于搞懂了 JS 类型转换机制 - 掘金 (juejin.cn)</a>）</p></blockquote><p>在 JavaScript 学习过程中，往往出现一些与我们常理相违背的结果，比如我们今天的论题<code>[] == ![]</code> ，它的返回的结果竟然是<code>true</code> ，这着实让初学者感到困惑。因为根据直觉，<code>[]</code>和<code>![]</code>两者应该是不相等的。面试官恰恰就会抓住这一点，对程序员们进行考察。</p><p>而本文将结合官方文档对该题进行深度剖析。</p><h2 id="看看官方文档怎么说"><a href="#看看官方文档怎么说" class="headerlink" title="看看官方文档怎么说"></a>看看官方文档怎么说</h2><h3 id="关于"><a href="#关于" class="headerlink" title="关于 =="></a>关于 <code>==</code></h3><p>关于<code>==</code>，文档这样描述：<a href="https://es5.github.io/#x11.9.1">Annotated ES5 11.9.1</a></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/974ce8282bb642cfbf0f14bdcff5f088~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1037&h=284&s=36877&e=png&b=ffffff" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ad3699c380045b89d0047d7fec7df8b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1217&h=932&s=123351&e=png&b=ffffff" alt="image.png"></p><p>根据官方文档，我总结了以下 <code>==</code> 的隐式转换规则，一些简单的就忽略掉了：</p><ol><li><p><strong>类型相同的比较：</strong></p><p>（1）如果类型是 Undefined 或 Null，返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">null</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>（2）如果一个是 +0，另一个是 -0，返回 <code>true</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">+<span class="hljs-number">0</span> == -<span class="hljs-number">0</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>（3）如果类型是对象，二者引用同一个对象，返回 <code>true</code>，反之返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&#125; == &#123;&#125;; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p><strong>null 和 undefined 比较：</strong> 仅当它们之间的比较时，返回 <code>true</code>。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>NaN 比较：</strong> NaN 与任何值比较都返回 <code>false</code>，包括 NaN 自己。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">NaN</span> == <span class="hljs-title class_">NaN</span>; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>字符串与数字比较：</strong> 如果其中一个操作数是字符串，另一个是数字，将字符串转换为数字，然后进行比较。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;5&quot;</span> == <span class="hljs-number">5</span>; <span class="hljs-comment">// true，将字符串 &#x27;5&#x27; 转换为数字 5 进行比较</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>布尔值与非布尔值比较：</strong> 布尔值无法直接比较，需先将布尔值转换为数字（<code>true</code> 转换为 <code>1</code>，<code>false</code> 转换为 <code>0</code>），非布尔值也需要转换成数字再比较。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">true</span> == <span class="hljs-number">1</span>; <span class="hljs-comment">// true，将布尔值 true 转换为数字 1 进行比较</span><br><span class="hljs-literal">false</span> == <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">// false，将布尔值 false 转换为数字 0 ，将字符串 &#x27;123&#x27; 转换为数字 123 进行比较</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>对象与原始类型比较：</strong> 如果其中一个是对象，另一个是原始类型，将对象通过 <code>ToPrimitive</code> 转换为原始类型，然后进行比较。<em>（即如果原始类型为字符串，则对象转换成字符串再比较；如果原始类为布尔值，则将布尔值与对象都转换成数字进行比较；如果原始类为数字，则将对象转换成数字进行比较。）</em></li></ol><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&#125; == <span class="hljs-number">1</span>;  <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p><code>ToPrimitive</code> 在我的上篇文章（<a href="https://juejin.cn/post/7307857937699405862">看了一天的官方文档，终于搞懂了 JS 类型转换机制</a>）中详细介绍过，这里我们直接当做公式套用。</p><blockquote><p>ToPrimitive(obj, Number) &#x3D;&#x3D;&gt; Number({})</p><ol><li>如果 obj 是基本类型，直接返回</li><li>否则，调用 valueOf 方法，如果得到原始值，则返回</li><li>否则，调用 toString 方法，如果得到原始值，则返回</li><li>否则，报错</li></ol></blockquote><p>首先<code>&#123;&#125;</code>先被<code>ToPrimitive</code>转换成字符串<code>&quot;[object Object]&quot;</code>，就相当于直接判断 <code>&quot;[object Object]&quot; == 1</code>，字符串与数字的比较中，又要将字符串转换成数字，”[object Object]”转换成数字为 <code>NaN</code>，而<code>NaN</code> 与任何值比较都为 <code>false</code>。</p><p>所以 <code>&#123;&#125; == 1</code> 返回 <code>false</code>。</p><ol start="7"><li><strong>关系转换图如下：</strong></li></ol><p align=center><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eaf399a47c6f44ee8bcb54996ba8cc28~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=637&h=327&s=12357&e=png&b=ffffff" alt="image.png" width="70%" /></p><hr><p>回到<code>[] == ! [] </code></p><p>这里判断<code>[]</code>与<code>![]</code>，两边都是对象，那怎么比呢，我们发现右边还有一个<code>!</code>，我们知道<code>!</code>的优先级是要大于<code>==</code>的，那么先进行非运算。</p><h3 id="关于-1"><a href="#关于-1" class="headerlink" title="关于 !"></a>关于 <code>!</code></h3><p>关于<code>!</code>，文档这样描述：<a href="https://es5.github.io/#x11.4.9">Annotated ES5 11.4.9</a><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/744fe88550fe4c1898cb0531dfd3ff05~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=804&h=264&s=29364&e=png&b=ffffff" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04d61953adad4811aaae747aac5bc178~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=912&h=395&s=36695&e=png&b=fafafa" alt="image.png"></p><p>上表为各数据类型转换成布尔值的结果。</p><p>简而言之，<code>!</code>这个运算符会进行两步操作：</p><blockquote><ol><li><p><strong>对<code>!</code>后面的操作数转换成布尔值</strong></p></li><li><p><strong>将这个布尔值取反</strong></p></li></ol></blockquote><p>于是我们判断<code>![]</code>，将<code>[]</code>转换成布尔值，我们在官方文档中就知道了，任何对象转换成布尔值都得到<code>ture</code>，然后在取反，得到<code>![]</code>为<code>false</code>。</p><h2 id="最终判断"><a href="#最终判断" class="headerlink" title="最终判断"></a>最终判断</h2><p>原式<code>[] == ![]</code>经过<code>!</code>运算将等式右边转换成了 <code>false</code>。即<code>[] == false</code>。</p><p>接着，根据<code>==</code>隐式转换规则，等式两边为对象和布尔，那么它们都应该转换成数字进行比较。</p><p><code>[]</code>经过<code>ToPrimitive</code>会被转换成字符串<code>&quot;&quot;</code>。再将等号两边的字符串<code>&quot;&quot;</code>和布尔值<code>false</code>转换成数字 <code>0</code> ，得到 <code>0 == 0</code> 。打印得到 <code>true</code>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>所以实际在进行<code>[] == ! []</code>判断时，在 JS 引擎内部，会将这行代码执行成这个样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">[] == ![]<br><br>[] == !<span class="hljs-literal">true</span> <span class="hljs-comment">// 将空数组这个对象类型转换成布尔值</span><br><br>[] == <span class="hljs-literal">false</span> <span class="hljs-comment">// ! 运算符对 true 进行取反</span><br><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-literal">false</span> <span class="hljs-comment">// 对 [] 进行 ToPrimitive 操作，返回一个空对象</span><br><br><span class="hljs-number">0</span> == <span class="hljs-number">0</span> <span class="hljs-comment">// 将等号两边都转换成数字类型</span><br></code></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><strong>看到这里，恭喜你又拿下一道大厂面试题！</strong></p><p>希望这篇文章能够为你提供帮助，如果你还有不懂之处，可以反复阅读，或者在评论区留言，学习是一个循序渐进，敢于试错的过程，我们顶峰相见！</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>看了一天官方文档，终于搞懂了类型转换机制</title>
    <link href="/2023/12/03/%E7%9C%8B%E4%BA%86%E4%B8%80%E5%A4%A9%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E7%BB%88%E4%BA%8E%E6%90%9E%E6%87%82%E4%BA%86%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/12/03/%E7%9C%8B%E4%BA%86%E4%B8%80%E5%A4%A9%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E7%BB%88%E4%BA%8E%E6%90%9E%E6%87%82%E4%BA%86%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>JS 数据类型的转换机制是是学习 JS 过程中的一大难点，一度成为初学者面临的巨大挑战，这一复杂性往往源于 JS 的灵活性和动态性，使得在不同的上下文中，同一个值可能被解释为不同的数据类型。</p></blockquote><p>本文将针从底层出发，借助官方文档，深度剖析 JS 类型转换机制。</p><h2 id="JS-中的数据类型"><a href="#JS-中的数据类型" class="headerlink" title="JS 中的数据类型"></a>JS 中的数据类型</h2><p>首先我们回忆一下 JS 中的数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//基本数据类型</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">123</span>; <span class="hljs-comment">//数字</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello world&quot;</span>; <span class="hljs-comment">//字符串</span><br><span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">//布尔</span><br><span class="hljs-keyword">let</span> un = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//未定义</span><br><span class="hljs-keyword">let</span> nu = <span class="hljs-literal">null</span>; <span class="hljs-comment">//空值</span><br><span class="hljs-keyword">let</span> bigint = <span class="hljs-number">9007199254740991n</span>; <span class="hljs-comment">//大整数</span><br><span class="hljs-keyword">let</span> sy = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;symbol&quot;</span>); <span class="hljs-comment">//符号</span><br><br><span class="hljs-comment">//引用数据类型</span><br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-comment">//对象</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-attr">isStudent</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">&quot;reading&quot;</span>, <span class="hljs-string">&quot;coding&quot;</span>],<br>&#125;;<br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]; <span class="hljs-comment">//数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你好！掘友&quot;</span>;<br>&#125;<br><span class="hljs-comment">//等等</span><br></code></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>JS 类型转换主要分为两种：<strong>隐式类型转换</strong>和<strong>显式类型转换</strong>。</p><blockquote><p><strong>1. 隐式类型转换</strong>：在隐式类型转换中，JS 引擎自动地将一种数据类型转换为另一种类型，通常发生在运算或比较的过程中。这种转换是隐式的，开发者不需要明确地进行操作，而是由 JS 引擎在必要的时候自动完成。</p><p><strong>2. 显式类型转换</strong>：显式类型转换是由开发者明确指定的类型转换，通过调用相应的转换函数或使用一些特定的语法进行。这种转换是开发者有意识地进行的，用于确保数据在特定上下文中具有期望的类型。</p></blockquote><p>看到这你可能还是一头雾水，举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;<br><span class="hljs-keyword">var</span> b = a + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//隐式类型转换</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-title class_">String</span>(a); <span class="hljs-comment">//显式类型转换</span><br></code></pre></td></tr></table></figure><p>在这里，隐式强制类型转换发生在变量 <code>a</code> 被赋值给变量 <code>b</code> 的过程中。通过将 <code>a</code> 与一个空字符串 <code>&quot;&quot;</code> 相加，JS 引擎会自动将 <code>a</code> 的值转换为字符串，然后与空字符串拼接在一起。这是一种常见的将数字转换为字符串的方式，是隐式的，因为你并没有明确指示进行类型转换。</p><p>而显式强制类型转换通过调用 <code>String()</code> 函数来实现。你明确告诉 JS 引擎将变量 <code>a</code> 的值转换为字符串。这种方式更加明显，开发者有意识地进行了类型转换。</p><p>总体而言，这两种方式都能将数字 <code>12</code> 转换为字符串，但发生的时机和方式略有不同。隐式转换是在某些操作中自动进行的，而显式转换是由开发者明确调用的。</p><p>下面我们分别对这两种类型转换展开分析。</p><h2 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h2><p>我们通常使用官方定义的 <code>Number()</code>、<code>String()</code>、<code>Boolean()</code> 等函数进行显示转换，这些函数提供了明确的方式将值转换为特定的数据类型。</p><h3 id="原始值转其他类型"><a href="#原始值转其他类型" class="headerlink" title="原始值转其他类型"></a>原始值转其他类型</h3><h4 id="1-原始值转换成布尔值"><a href="#1-原始值转换成布尔值" class="headerlink" title="1. 原始值转换成布尔值"></a>1. 原始值转换成布尔值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>()); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(-<span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot;123&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot;&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>见官方文档 9.2：<a href="https://es5.github.io/#x9.2">Annotated ES5 9.2</a></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af248dc983341429de2033138eaa78b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=961&h=426&s=35352&e=png&b=fafafa" alt="image.png"></p><p>简而言之：</p><blockquote><ul><li><code>false</code>、<code>0</code>、<code>&#39;&#39;</code>、<code>null</code>、<code>undefined</code>以及<code>NaN</code>转换为<code>false</code></li><li>其他所有值转换为<code>true</code></li></ul></blockquote><h4 id="2-原始值转换成数字"><a href="#2-原始值转换成数字" class="headerlink" title="2. 原始值转换成数字"></a>2. 原始值转换成数字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&quot;123&quot;</span>)); <span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&quot;abc&quot;</span>)); <span class="hljs-comment">//NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>()); <span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">false</span>)); <span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//NaN</span><br></code></pre></td></tr></table></figure><p>见官方文档 9.3：<a href="https://es5.github.io/#x9.3">Annotated ES5 9.3</a></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fbe5f577d424fd38e3f14ccb2d4e72c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=945&h=518&s=35867&e=png&b=fbfbfb" alt="image.png"></p><p>大概的意思就是：</p><blockquote><ul><li>如果是数字字符串，则转换为对应的数字。</li><li>如果是非数字字符串或无法解析为数字的字符串，则转换为 <code>NaN</code>。</li><li>布尔值 <code>true</code> 被转换为 <code>1</code>，<code>false</code> 被转换为 <code>0</code>。</li><li><code>null</code> 被转换为 <code>0</code>。</li><li><code>undefined</code> 被转换为 <code>NaN</code>。</li></ul></blockquote><p>其中，对象转数字规则没有罗列，我们将在后文对 对象类型（Object）转数字类型进行着重分析。</p><h4 id="3-原始值转换成字符串"><a href="#3-原始值转换成字符串" class="headerlink" title="3. 原始值转换成字符串"></a>3. 原始值转换成字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>()); <span class="hljs-comment">//&#x27;&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-number">123</span>)); <span class="hljs-comment">//&#x27;123&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">//&#x27;NaN&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//&#x27;undefined&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">//&#x27;null&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//&#x27;true&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>空值或没有提供参数时，返回空字符串。</li><li>数字转字符串：直接将数字转换为对应的字符串形式。</li><li><code>NaN</code> 被转换为字符串 <code>&#39;NaN&#39;</code>。</li><li>布尔值转字符串：<code>true</code> 转换为 <code>&quot;true&quot;</code>，<code>false</code> 转换为 <code>&quot;false&quot;</code>。</li><li><code>null</code> 转换为字符串 <code>&quot;null&quot;</code>。</li><li><code>undefined</code> 转换为 <code>&quot;undefined&quot;</code>。</li></ul><p>见官方文档 9.8：<a href="https://es5.github.io/#x9.8">Annotated ES5 9.8</a></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdbfe41b559f47029bdc769028fbee4a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=920&h=447&s=32790&e=png&b=f9f9f9" alt="image.png"></p><h4 id="4-原始值转对象"><a href="#4-原始值转对象" class="headerlink" title="4. 原始值转对象"></a>4. 原始值转对象</h4><p>原始数据类型可以通过其对应的包装对象来实现转换，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//[Boolean: true]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>(<span class="hljs-number">123</span>)); <span class="hljs-comment">//[Number: 123]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>(<span class="hljs-string">&quot;123&quot;</span>)); <span class="hljs-comment">//[String: &#x27;123&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">//&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>见官方文档 9.9：<a href="https://es5.github.io/#x9.9">Annotated ES5 9.9</a></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdc53305afb2424cb0e7a0e841465472~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=996&h=548&s=49999&e=png&b=fbfbfb" alt="image.png"></p><blockquote><ul><li>布尔值、数字、字符串分别被转换为对应的 Boolean、Number、String 对象。</li><li>对于 <code>undefined</code>，使用 <code>Object()</code> 转换为一个空对象 <code>&#123;&#125;</code>。</li><li>对于 <code>null</code>，同样使用 <code>Object()</code> 转换为一个空对象 <code>&#123;&#125;</code>。</li></ul></blockquote><p>以上就是原始值转换数据类型的官方解释，我们不用过多考虑，只需要无脑接受就好。</p><p>当我们要用到的时候，查下这个表就行了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3feba050341e49e6bba8861a728f1e09~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1080&h=1017&s=508208&e=png&b=f9f9f9" alt="67fab372c578caf931014f18b425317.png"></p><p>因为官方没有给<code>Null</code>和<code>Undefined</code>定义显示转换的方法，所以我们暂且不聊。</p><p>然而以上这些内容都不是本文的重点，我们的重点是<strong>对象转换成原始值的过程</strong>，好戏才刚刚开始。</p><h3 id="对象转原始值"><a href="#对象转原始值" class="headerlink" title="对象转原始值"></a>对象转原始值</h3><p>对象转<code>Null</code>与<code>Undefined</code>没有意义，所以我们只聊对象转字符串、数字和布尔值。</p><h4 id="1-对象转数字"><a href="#1-对象转数字" class="headerlink" title="1. 对象转数字"></a>1. 对象转数字</h4><p>这时候我们再打开官方文档，回到之前铺垫的位置，如果转换的对象为对象类型的话，会进行红框中的操作。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10958fa5d33f4b7b8557883c5176f978~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=960&h=534&s=49735&e=png&b=fafafa" alt="image.png"></p><p>大概意思是，你传入一个值，经过<code>ToPrimitive</code>这样一个函数的调用并返回一个值，这个值会被转换成数字类型，我们可以通过文档（<a href="https://es5.github.io/#x9.3">Annotated ES5 9.3</a>）进入到<code>ToPrimitive</code>这个函数内部。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55bb6b70e0bb4147a00488b3060777ad~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=969&h=492&s=65356&e=png&b=faf9f9" alt="image.png"></p><p>看不懂，出国留学一下······</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff31030419fb4575b899dd3522e72015~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=914&h=917&s=99856&e=png&b=faf9f9" alt="image.png"></p><p>意思很明了，当你传入的是基本数据类型的时候，不会进行转换。唯独传入的是对象（Object）的时候才会有进行转换，它会调用对象的 [[DefaultValue]] 内部方法，于是我们跟随文档，跳到 8.12.8 。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b33ac07060264691b7c788826ed93ea1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1321&h=877&s=127585&e=png&b=ffffff" alt="image.png"></p><p>翻译就不给大家看了，直接告诉大家它什么意思吧。</p><p><code>ToPrimitive(obj, Number)</code> 是 ECMAScript 规范中描述的一种抽象操作，用于将给定对象 <code>obj</code> 转换为一个原始值，在进行数据转换的时候才会触发。这里我们目标是要将对象转换成数字，所以第二个参数是<code>Number</code>，字符串则是<code>String</code>。</p><p>下面是 <code>ToPrimitive(obj, Number)</code> 的执行步骤：</p><ol><li><p><strong>如果 <code>obj</code> 是基本类型：</strong></p><ul><li>如果 <code>obj</code> 已经是基本类型（例如数字、字符串、布尔值等），那么直接返回 <code>obj</code>。</li></ul></li><li><p><strong>否则，调用 <code>valueOf</code> 方法：</strong></p><ul><li>如果 <code>obj</code> 不是基本类型，即它是一个对象，首先会尝试调用 <code>valueOf</code> 方法。</li><li>如果 <code>valueOf</code> 方法存在并返回一个原始值，那么返回这个原始值。</li></ul></li><li><p><strong>否则，调用 <code>toString</code> 方法：</strong></p><ul><li>如果 <code>valueOf</code> 方法不存在，或者它返回的仍然是一个对象，那么接下来会调用 <code>toString</code> 方法。</li><li>如果 <code>toString</code> 方法存在并返回一个原始值，那么返回这个原始值。</li></ul></li><li><p><strong>否则，报错：</strong></p><ul><li>如果 <code>toString</code> 方法也不存在，或者它返回的仍然是一个对象，那么就无法将对象转换为原始值，此时会抛出一个错误。</li></ul></li></ol><p>简化一下：</p><blockquote><p>ToPrimitive(obj, Number) &#x3D;&#x3D;&gt; Number({})</p><ol><li>如果 obj 是基本类型，直接返回</li><li>否则，调用 valueOf 方法，如果得到原始值，则返回</li><li>否则，调用 toString 方法，如果得到原始值，则返回</li><li>否则，报错</li></ol></blockquote><p>这就相当于一个公式，当我们在将一个对象转换成数字类型的时候，直接套就行。</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">a = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(a)); <span class="hljs-comment">//NaN</span><br></code></pre></td></tr></table></figure><p>开始套公式：</p><ol><li><p><strong>如果 <code>a</code> 是基本类型：</strong></p><ul><li><code>a</code> 是一个对象，不是基本类型。</li></ul></li><li><p><strong>调用 <code>valueOf</code> 方法：</strong></p><ul><li>尝试调用 <code>valueOf</code> 方法，看是否可以获取到原始值。</li><li>由于 <code>a</code> 是一个空对象 <code>&#123;&#125;</code>，而普通的对象（没有重写 <code>valueOf</code> 方法的情况下）的 <code>valueOf</code> 方法会返回对象本身，而不是一个原始值。</li></ul></li><li><p><strong>调用 <code>toString</code> 方法：</strong></p><ul><li>由于 <code>valueOf</code> 方法没有返回原始值，接下来调用 <code>toString</code> 方法。</li><li>对于普通的空对象 <code>&#123;&#125;</code>，<code>toString</code> 方法通常会返回 <code>&quot;[object Object]&quot;</code> 字符串。</li></ul></li></ol><p>调用<code>toString</code>方法的时候得到了原始值字符串<code>&quot;[object Object]&quot;</code>，于是<code>ToPrimitive</code>这个函数将其返回，最后就相当于 <code>Number(&quot;[object Object]&quot;)</code> 执行了这段代码。在 JS 引擎内部，<code>ToPrimitive</code>这个函数相当于进行了将 <code>Number(a)</code> 转化成了 <code>Number(&quot;[object Object]&quot;)</code> ，相当于将字符串转换成数字，所以最终打印结果为 <code>NaN</code>。</p><h4 id="2-对象转字符串"><a href="#2-对象转字符串" class="headerlink" title="2. 对象转字符串"></a>2. 对象转字符串</h4><p>与对象转数字类似，唯一的区别就是转字符串时在<code>ToPrimitive</code>函数中是先调用 <code>toString</code> 方法，后调用 <code>typeOf</code> 方法。</p><blockquote><p>ToPrimitive(obj, String) &#x3D;&#x3D;&gt; String({})</p><ol><li>如果 obj 是基本类型，直接返回</li><li>否则，调用 toString 方法，如果得到原始值，则返回</li><li>否则，调用 valueOf 方法，如果得到原始值，则返回</li><li>否则，报错</li></ol></blockquote><p>与对象转数字用法一致，区别在于调用 <code>toString</code> 方法和 <code>valueOf</code> 方法的顺序，区分这一点就行了。</p><h4 id="3-对象转布尔"><a href="#3-对象转布尔" class="headerlink" title="3. 对象转布尔"></a>3. 对象转布尔</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(&#123;&#125;)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>([])); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>对象转换为布尔值时，结果总是 <code>true</code>。</p><hr><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>隐式转换通常发生在一些运算符操作中，其中一些运算符会触发 JS 引擎自动进行类型转换以满足操作的要求。下面我们简单聊一下 <code>+</code> 这个运算符。</p><h3 id="一元运算-a"><a href="#一元运算-a" class="headerlink" title="一元运算 + a"></a>一元运算 <code>+ a</code></h3><p>官方文档（<a href="https://es5.github.io/#x11.4.6">Annotated ES5 11.4.6</a>）这样描述：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29819bbe7e4740fcb2dfa3bfa015d5c5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=800&h=216&s=23157&e=png&b=ffffff" alt="image.png"></p><p>如果遇到 <code>+</code> 号，且它是当作一元运算符来使用，那么 <code>+</code> 号后面的数据一定要被强制转化为 <code>Number</code> 类型。</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>这个例子中， <code>+</code> 后面接的是数字字符串，则转换成对应数字，所以打印结果为<code>1</code>，没问题。</p><p>那么 <code>+</code> 后面接的是对象类型呢，我们再举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+&#123;&#125;); <span class="hljs-comment">//NaN</span><br></code></pre></td></tr></table></figure><p>这个例子中， <code>+</code> 后面接的是一个空对象，那么对象怎么转换成<code>Number</code>呢，是不是要走<code>ToPrimitive</code>函数那一套哇，直接套公式就行了。</p><p>我直接搬过来：</p><blockquote><p>ToPrimitive(obj, Number) &#x3D;&#x3D;&gt; Number({})</p><ol><li>如果 obj 是基本类型，直接返回</li><li>否则，调用 valueOf 方法，如果得到原始值，则返回</li><li>否则，调用 toString 方法，如果得到原始值，则返回</li><li>否则，报错</li></ol></blockquote><p>我们前面已经走过一遍流程了，这个<code>ToPrimitive</code>函数最后会返回一个<code>&quot;[object Object]&quot;</code>字符串，所以最终就相当于 <code>+</code> 后面接的是一个字符串，则转换成 <code>NaN</code> ，打印结果也为 <code>NaN</code>，没问题。</p><p>我们也可以试着模拟一下整个过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// +&#123;&#125; 的过程模拟</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+&#123;&#125;); <span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-title function_">valueOf</span>()); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">//&quot;[object Object]&quot;</span><br><span class="hljs-comment">//返回&quot;[object Object]&quot;字符串</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&quot;[object Object]&quot;</span>)); <span class="hljs-comment">//NaN</span><br></code></pre></td></tr></table></figure><h3 id="二元运算-a-b"><a href="#二元运算-a-b" class="headerlink" title="二元运算 a + b"></a>二元运算 <code>a + b</code></h3><p>官方文档（<a href="https://es5.github.io/#x11.6.1">Annotated ES5 11.6.1</a>）这样描述：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ba8415ad2d24e2e8d5d150360b2a7e8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1399&h=622&s=85403&e=png&b=ffffff" alt="image.png"></p><p>二元运算符 <code>+</code> 可以执行字符串连接，也可以执行数字加法。简而言之，将 <code>+</code> 左右两边的数据分别用<code>ToPrimitive</code>函数调用一遍，如果返回值中有一个是字符串，则进行字符串拼接；否则进行加法运算。</p><p>即：</p><blockquote><p>lprim + rprim &#x3D;&#x3D; ToPrimitive(v1) + ToPrimitive(v2)</p><ol><li>当 + 两边有一个是字符串，则按字符串进行拼接</li><li>否则，转到 number 进行计算</li></ol></blockquote><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> + <span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//&#x27;11&#x27;</span><br></code></pre></td></tr></table></figure><p>我们分别让数字<code>1</code>和字符串<code>&#39;1&#39;</code>走一遍<code>ToPrimitive</code>，分别观察它们的返回值，发现<code>&#39;1&#39;</code>是数字字符串，在 <code>valueOf</code> 和 <code>toString</code> 方法后返回的还是<code>&#39;1&#39;</code>本身，即进行字符串拼接，得到打印结果<code>&#39;11&#39;</code>。</p><p>当你理解透彻后很容易得到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> + <span class="hljs-literal">null</span>); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] + []); <span class="hljs-comment">//&#x27;&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([] + &#123;&#125;); <span class="hljs-comment">//&#x27;[object Object]&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; + &#123;&#125;); <span class="hljs-comment">//&#x27;[object Object][object Object]&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><strong>当你读到这段话时，你已经跨过了 JS 类型转换这一座大山！</strong></p><p>希望这篇文章能够为你提供帮助，如果你还有不懂之处，可以反复阅读，或者在评论区留言，学习是一个循序渐进，敢于试错的过程，我们顶峰相见！</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
